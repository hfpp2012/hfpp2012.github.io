<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[小子的博客]]></title>
  <link href="http://yinsigan.github.io/atom.xml" rel="self"/>
  <link href="http://yinsigan.github.io/"/>
  <updated>2013-12-12T11:15:20+08:00</updated>
  <id>http://yinsigan.github.io/</id>
  <author>
    <name><![CDATA[小子]]></name>
    <email><![CDATA[ganweiliang886@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails Association Reference]]></title>
    <link href="http://yinsigan.github.io/blog/2013/12/11/rails-association-reference/"/>
    <updated>2013-12-11T10:09:00+08:00</updated>
    <id>http://yinsigan.github.io/blog/2013/12/11/rails-association-reference</id>
    <content type="html"><![CDATA[<h2>rails关联模型参数的使用</h2>

<p>上一篇<a href="http://yinsigan.github.io/blog/2013/12/10/rails-association/">rails association</a>说明了rails的各种模型的原理和设计,这篇我们来说说rails association具体参数的使用,通过一些案例或代码来分析它们的使用场景</p>

<p><img src="http://yinsigan.github.io/images/rails_association_reference/has_many_through.png"></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">School</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:squads</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:students</span><span class="p">,</span> <span class="ss">:through</span> <span class="o">=&gt;</span> <span class="ss">:squads</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Squad</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:school</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:students</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Student</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:squad</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Association(关联关系的使用)</h3>

<ul>
<li>association(force_reload = false)强制reload查数据库</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="no">Squad</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">students</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="c1">#&lt;Student id: 40, name: &quot;学员1&quot;, squad_id: 1, created_at: &quot;2013-12-11 02:43:53&quot;, updated_at: &quot;2013-12-11 02:43:53&quot;, active: true&gt;,</span>
</span><span class='line'> <span class="c1">#&lt;Student id: 41, name: &quot;学员2&quot;, squad_id: 1, created_at: &quot;2013-12-11 02:43:56&quot;, updated_at: &quot;2013-12-11 02:43:56&quot;, active: true&gt;]</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">students</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">delete</span> <span class="c1">#把最后一个学员删除,那班级s只剩下一个学员</span>
</span><span class='line'><span class="c1"># 可是还是两个学员</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">students</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="c1">#&lt;Student id: 40, name: &quot;学员1&quot;, squad_id: 1, created_at: &quot;2013-12-11 02:43:53&quot;, updated_at: &quot;2013-12-11 02:43:53&quot;, active: true&gt;,</span>
</span><span class='line'> <span class="c1">#&lt;Student id: 41, name: &quot;学员2&quot;, squad_id: 1, created_at: &quot;2013-12-11 02:43:56&quot;, updated_at: &quot;2013-12-11 02:43:56&quot;, active: true&gt;]</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1"># 如果传入一个参数true</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">students</span><span class="p">(</span><span class="kp">true</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="c1">#&lt;Student id: 40, name: &quot;学员1&quot;, squad_id: 1, created_at: &quot;2013-12-11 02:43:53&quot;, updated_at: &quot;2013-12-11 02:43:53&quot;, active: true&gt;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>其实传入true就是去数据库查询,不直接从变量(<strong>s.students</strong>)取值</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Student</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">8</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="sb">`students`</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="sb">`students`</span> <span class="no">WHERE</span> <span class="sb">`students`</span><span class="o">.</span><span class="n">`squad_id</span><span class="sb">` = 1 AND `</span><span class="n">students</span><span class="sb">`.`</span><span class="n">active</span><span class="sb">` = 1</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>association=(associate)</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># good</span>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="no">Student</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">squad</span> <span class="o">=</span> <span class="no">Squad</span><span class="o">.</span><span class="n">last</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># bad</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">squad_id</span> <span class="o">=</span> <span class="s1">&#39;9&#39;</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">save</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种方式有两个好处,第一个,你不在白名单(attr_accessible)写上:squad_id,第二个你能保证squad_id就是正确存在的吗</p>

<p>最佳实践也是推鉴这种方式的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">current_user</span><span class="o">.</span><span class="n">posts</span><span class="o">.</span><span class="n">build</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:post</span><span class="o">]</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>collection&lt;&lt;(object, …)创建记录</li>
</ul>


<p>这是我们创建记录的主要手段之一</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="no">Squad</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">students</span> <span class="o">&lt;&lt;</span> <span class="no">Student</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;学员&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>collection.delete(object, …)删除关联关系(不删除记录)</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="no">Squad</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">students</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">students</span><span class="o">.</span><span class="n">last</span><span class="p">)</span> <span class="c1">#删除最后一条,只是把值设为NULL</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="no">SQL</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">6</span><span class="n">ms</span><span class="p">)</span>  <span class="no">UPDATE</span> <span class="sb">`students`</span> <span class="no">SET</span> <span class="sb">`squad_id`</span> <span class="o">=</span> <span class="no">NULL</span> <span class="no">WHERE</span> <span class="sb">`students`</span><span class="o">.</span><span class="n">`squad_id</span><span class="sb">` = 1 AND `</span><span class="n">students</span><span class="sb">`.`</span><span class="n">active</span><span class="sb">` = 1 AND `</span><span class="n">students</span><span class="sb">`.`</span><span class="nb">id</span><span class="sb">` IN (43)</span>
</span></code></pre></td></tr></table></div></figure>


<p>delete_all不用传参数就可以删除所有关联关系了</p>

<p>要保留数据的时候又要去掉关联关系用这种方式最好了</p>

<ul>
<li>collection.delete(object, …)删除记录</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="no">Squad</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'><span class="n">st</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">students</span><span class="o">.</span><span class="n">destroy</span><span class="p">(</span><span class="n">st</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 是真正的删除记录</span>
</span><span class='line'><span class="no">DELETE</span> <span class="no">FROM</span> <span class="sb">`students`</span> <span class="no">WHERE</span> <span class="sb">`students`</span><span class="o">.</span><span class="n">`</span><span class="nb">id</span><span class="sb">` = 46</span>
</span></code></pre></td></tr></table></div></figure>


<p>destroy_all不用传参数就可以删除所有关联的记录了</p>

<ul>
<li>collection_singular_ids=ids(更改关联关系)</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="no">Squad</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">student_ids</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="mi">42</span><span class="p">,</span> <span class="mi">43</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">students_ids</span> <span class="o">=</span> <span class="o">[</span><span class="mi">40</span><span class="p">,</span> <span class="mi">43</span><span class="o">]</span>
</span><span class='line'><span class="c1">#会查一遍数据表students,没有的id你可别乱来哦</span>
</span><span class='line'><span class="no">Student</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">8</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="sb">`students`</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="sb">`students`</span> <span class="no">WHERE</span> <span class="sb">`students`</span><span class="o">.</span><span class="n">`</span><span class="nb">id</span><span class="sb">` IN (40, 43)</span>
</span><span class='line'>
</span><span class='line'><span class="sb"># 不要42了就把关联关系去掉(设为NULL)</span>
</span><span class='line'><span class="sb">SQL (0.6ms)  UPDATE `</span><span class="n">students</span><span class="sb">` SET `</span><span class="n">squad_id</span><span class="sb">` = NULL WHERE `</span><span class="n">students</span><span class="sb">`.`</span><span class="n">squad_id</span><span class="sb">` = 1 AND `</span><span class="n">students</span><span class="sb">`.`</span><span class="n">active</span><span class="sb">` = 1 AND `</span><span class="n">students</span><span class="sb">`.`</span><span class="nb">id</span><span class="sb">` IN (42)</span>
</span><span class='line'>
</span><span class='line'><span class="sb"># 把40加进去</span>
</span><span class='line'><span class="sb">UPDATE `</span><span class="n">students</span><span class="sb">` SET `</span><span class="n">squad_id</span><span class="sb">` = 1, `</span><span class="n">updated_at</span><span class="sb">` = &#39;2013-12-11 03:19:40&#39; WHERE `</span><span class="n">students</span><span class="sb">`.`</span><span class="nb">id</span><span class="sb">` = 40</span>
</span></code></pre></td></tr></table></div></figure>


<p>从表单的复选框传来的数据用这种方式解决最好了</p>

<p>最佳实践就是这么做滴</p>

<figure class='code'><figcaption><span>多角色管理</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">% for </span><span class="n">role</span> <span class="k">in</span> <span class="no">Role</span><span class="o">.</span><span class="n">all</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">&lt;div&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="sx">%= check_box_tag &quot;user[role_ids][]&quot;, role.id, @user.roles.include?(role) %&gt;</span>
</span><span class='line'><span class="sx">  &lt;%=</span><span class="n">h</span> <span class="n">role</span><span class="o">.</span><span class="n">name</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">&lt;/div&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sx">% end %&gt;</span>
</span><span class='line'><span class="sx">&lt;%= hidden_field_tag &quot;user[role_ids][]&quot;, &quot;&quot; %&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>collection.clear会把所有关联关系清除或者删掉</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="no">Squad</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">students</span><span class="o">.</span><span class="n">clear</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 只是把关联关系清除而已</span>
</span><span class='line'><span class="no">UPDATE</span> <span class="sb">`students`</span> <span class="no">SET</span> <span class="sb">`squad_id`</span> <span class="o">=</span> <span class="no">NULL</span> <span class="no">WHERE</span> <span class="sb">`students`</span><span class="o">.</span><span class="n">`squad_id</span><span class="sb">` = 1 AND `</span><span class="n">students</span><span class="sb">`.`</span><span class="n">active</span><span class="sb">` = 1 AND `</span><span class="n">students</span><span class="sb">`.`</span><span class="nb">id</span><span class="sb">` IN (42, 42)</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果不止想关联关系清除呢,那个就是要在has_many时加入:dependent => :destroy就可以了</p>

<p>其实看下clear的源码就知道原理</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># File activerecord/lib/active_record/associations/association_collection.rb, line 244</span>
</span><span class='line'><span class="k">def</span> <span class="nf">clear</span>
</span><span class='line'>  <span class="k">return</span> <span class="nb">self</span> <span class="k">if</span> <span class="n">length</span><span class="o">.</span><span class="n">zero?</span> <span class="c1"># forces load_target if it hasn&#39;t happened already</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="vi">@reflection</span><span class="o">.</span><span class="n">options</span><span class="o">[</span><span class="ss">:dependent</span><span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="vi">@reflection</span><span class="o">.</span><span class="n">options</span><span class="o">[</span><span class="ss">:dependent</span><span class="o">]</span> <span class="o">==</span> <span class="ss">:destroy</span>
</span><span class='line'>    <span class="n">destroy_all</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">delete_all</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">self</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>collection.exists?判断记录是否存在</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="no">Squad</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">students</span><span class="o">.</span><span class="n">exists?</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">students</span><span class="o">.</span><span class="n">exists?</span><span class="p">(</span><span class="no">Student</span><span class="o">.</span><span class="n">first</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">students</span><span class="o">.</span><span class="n">exists?</span><span class="p">(</span><span class="ss">:id</span> <span class="o">=&gt;</span> <span class="mi">42</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>用<strong>exists?</strong>来判断比<strong>include?</strong>更灵活,<strong>include?</strong>只支持类似这样<code>inlcude?(Student.first)</code>的判断</p>

<h3>Association Parameter Reference(参数的使用)</h3>

<p>有些参数在上一篇<a href="http://yinsigan.github.io/blog/2013/12/10/rails-association/">rails association</a>已经提及过，例如polymorphic, :through等,这里再阐述几个比较常用或用处比较大的</p>

<ul>
<li>class_name</li>
</ul>


<p>查找实际的类名(model)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 默认情况下是:students的,如果要换个名字,就要指定实际的class_name</span>
</span><span class='line'><span class="n">has_many</span> <span class="ss">:newest_students</span><span class="p">,</span> <span class="ss">:class_name</span> <span class="o">=&gt;</span> <span class="s1">&#39;Student&#39;</span><span class="p">,</span> <span class="ss">:order</span> <span class="o">=&gt;</span> <span class="s1">&#39;created_at DESC&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">SELECT</span> <span class="sb">`students`</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="sb">`students`</span> <span class="no">WHERE</span> <span class="sb">`students`</span><span class="o">.</span><span class="n">`squad_id</span><span class="sb">` = 1 ORDER BY created_at DESC</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>conditions</li>
</ul>


<p>指定查询条件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">has_many</span> <span class="ss">:students</span><span class="p">,</span> <span class="ss">:conditions</span> <span class="o">=&gt;</span> <span class="s2">&quot;active = 1&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在rails 4已经用where代替conditions了</p>

<p>conditions有个要注意的地方</p>

<p><code>:conditions =&gt; "active = 1"</code>和<code>{active: true}</code>(Hash)是不一样的
当你用s.students.create或s.students.build创建student的时候,active的值会不一样
用<code>{active: true}</code>形式创建时不管你的active的默认值是否是true，创建的student的active都是true
而<code>:conditions =&gt; "active = 1"</code>就是看active的默认值</p>

<p>:conditions也可以接proc:<code>:conditions =&gt; proc { ["orders.created_at &gt; ?", 10.hours.ago] }</code></p>

<p>实际项目的代码如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">School</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:students</span><span class="p">,</span> <span class="ss">:include</span> <span class="o">=&gt;</span> <span class="ss">:user</span><span class="p">,</span> <span class="ss">:order</span> <span class="o">=&gt;</span> <span class="s2">&quot;users.name DESC&quot;</span><span class="p">,</span> <span class="ss">:conditions</span> <span class="o">=&gt;</span> <span class="s2">&quot;users.tp = 0&quot;</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:staff_users</span><span class="p">,</span> <span class="ss">:class_name</span> <span class="o">=&gt;</span> <span class="s2">&quot;User&quot;</span><span class="p">,</span> <span class="ss">:order</span> <span class="o">=&gt;</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:conditions</span> <span class="o">=&gt;</span> <span class="s2">&quot;tp = 1&quot;</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:staffs</span><span class="p">,</span> <span class="ss">:through</span> <span class="o">=&gt;</span> <span class="ss">:users</span><span class="p">,</span> <span class="ss">:order</span> <span class="o">=&gt;</span> <span class="s2">&quot;users.name DESC&quot;</span><span class="p">,</span> <span class="ss">:conditions</span> <span class="o">=&gt;</span> <span class="s2">&quot;users.tp = 1&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>counter_cache</li>
</ul>


<p>在数据库中记录孩子的数量</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rails g migration add_students_count_to_squads students_count:integer
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">AddStudentsCountToSquads</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>    <span class="n">add_column</span> <span class="ss">:squads</span><span class="p">,</span> <span class="ss">:students_count</span><span class="p">,</span> <span class="ss">:string</span>
</span><span class='line'>    <span class="no">Squad</span><span class="o">.</span><span class="n">reset_column_information</span>
</span><span class='line'>    <span class="no">Squad</span><span class="o">.</span><span class="n">find_each</span> <span class="k">do</span> <span class="o">|</span><span class="nb">p</span><span class="o">|</span>
</span><span class='line'>      <span class="no">Squad</span><span class="o">.</span><span class="n">update_counters</span> <span class="nb">p</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="ss">:students_count</span> <span class="o">=&gt;</span> <span class="nb">p</span><span class="o">.</span><span class="n">students</span><span class="o">.</span><span class="n">length</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Squad</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:students</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Student</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:squad</span><span class="p">,</span> <span class="ss">:counter_cache</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>默认的字段名是跟关联(has_many)的model是一致的,在上述的例子中就是<strong>students_count</strong>,如果想改变这个name也可以,给:counter_cache指定值就可以了,例如<code>:counter_cache =&gt; :children_count</code></p>

<p>当删除关联关系时(squad_id设为NULL)时,students_count不会更新</p>

<ul>
<li>dependent</li>
</ul>


<p>依赖性</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Squad</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:students</span><span class="p">,</span> <span class="ss">:dependent</span> <span class="o">=&gt;</span> <span class="ss">:destroy</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Student</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:squad</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果传入<code>:dependent =&gt; :nullify</code>不删除数据,只删除关联数据</p>

<ul>
<li>foreign_key</li>
</ul>


<p>外键</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Topic</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:creater</span><span class="p">,</span> <span class="ss">:class_name</span> <span class="o">=&gt;</span> <span class="s1">&#39;User&#39;</span><span class="p">,</span> <span class="ss">:foreign_key</span> <span class="o">=&gt;</span> <span class="s2">&quot;creater_id&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>当你的model name跟foreign_key不一致时就可以手动指定关联的foreign_key
这样写当<code>topic.creater.try(:name)</code>就可以简单取得创建者的name了</p>

<ul>
<li>include</li>
</ul>


<p>包含查询</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Squad</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:students</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Student</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:squad</span><span class="p">,</span> <span class="ss">:include</span> <span class="o">=&gt;</span> <span class="ss">:school</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">School</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:squads</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="no">Student</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">squad</span>
</span><span class='line'><span class="c1"># 查了schools这个表,把数据一并取了出来</span>
</span><span class='line'><span class="no">Squad</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">3</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="sb">`squads`</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="sb">`squads`</span> <span class="no">WHERE</span> <span class="sb">`squads`</span><span class="o">.</span><span class="n">`</span><span class="nb">id</span><span class="sb">` = 14 LIMIT 1</span>
</span><span class='line'><span class="sb">School Load (0.3ms)  SELECT `</span><span class="n">schools</span><span class="sb">`.* FROM `</span><span class="n">schools</span><span class="sb">` WHERE `</span><span class="n">schools</span><span class="sb">`.`</span><span class="nb">id</span><span class="sb">` IN (1)</span>
</span><span class='line'>
</span><span class='line'><span class="sb"># 前面已经查了schools的数据了,现在不会查sql的</span>
</span><span class='line'><span class="sb">s.squad.school</span>
</span></code></pre></td></tr></table></div></figure>


<p>当你要查<code>Student.first.squad.school</code>就方便多了</p>

<ul>
<li>touch</li>
</ul>


<p>当子类被创建或更改时,更新父类的updated_at</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Student</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:squad</span><span class="p">,</span> <span class="ss">:touch</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Squad</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:students</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="no">Student</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;学员&#39;</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 其实就是把父的updated_at更新了一下</span>
</span><span class='line'><span class="no">UPDATE</span> <span class="sb">`students`</span> <span class="no">SET</span> <span class="sb">`name`</span> <span class="o">=</span> <span class="s1">&#39;3333333333333&#39;</span><span class="p">,</span> <span class="sb">`updated_at`</span> <span class="o">=</span> <span class="s1">&#39;2013-12-11 14:59:47&#39;</span> <span class="no">WHERE</span> <span class="sb">`students`</span><span class="o">.</span><span class="n">`</span><span class="nb">id</span><span class="sb">` = 86</span>
</span><span class='line'><span class="sb">Squad Load (0.6ms)  SELECT `</span><span class="n">squads</span><span class="sb">`.* FROM `</span><span class="n">squads</span><span class="sb">` WHERE `</span><span class="n">squads</span><span class="sb">`.`</span><span class="nb">id</span><span class="sb">` = 14 LIMIT 1</span>
</span><span class='line'><span class="sb">SQL (0.7ms)  UPDATE `</span><span class="n">squads</span><span class="sb">` SET `</span><span class="n">updated_at</span><span class="sb">` = &#39;2013-12-11 14:59:47&#39; WHERE `</span><span class="n">squads</span><span class="sb">`.`</span><span class="nb">id</span><span class="sb">` = 14</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果不想更新updated_at, 还可以指定更新具体的column,例如<code>:touch =&gt; :accessed_at</code></p>

<ul>
<li>validate</li>
</ul>


<p>跳过验证</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Squad</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:students</span><span class="p">,</span> <span class="ss">:validate</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Student</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:squad</span>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:presence</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># failure</span>
</span><span class='line'><span class="no">Student</span><span class="o">.</span><span class="n">create</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># success</span>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="no">Squad</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">students</span><span class="o">.</span><span class="n">create</span>
</span></code></pre></td></tr></table></div></figure>


<p>在创建子对象时,可以跳过验证</p>

<ul>
<li>source</li>
</ul>


<p>指定查找源, 和has_one :through或has_many :through一起使用</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">School</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:squads</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:squads_teachers</span><span class="p">,</span> <span class="ss">:through</span> <span class="o">=&gt;</span> <span class="ss">:squads</span><span class="p">,</span> <span class="ss">:source</span> <span class="o">=&gt;</span> <span class="ss">:teachers</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Squad</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:teachers</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:school</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Teacher</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:squad</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:staff</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="no">School</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">squads_teachers</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 查找的是teachers表,不过teachers去joins squads表</span>
</span><span class='line'><span class="no">School</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="mi">5</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="sb">`schools`</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="sb">`schools`</span> <span class="no">LIMIT</span> <span class="mi">1</span>
</span><span class='line'><span class="no">Teacher</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">90</span><span class="o">.</span><span class="mi">0</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="sb">`teachers`</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="sb">`teachers`</span> <span class="no">INNER</span> <span class="no">JOIN</span> <span class="sb">`squads`</span> <span class="no">ON</span> <span class="sb">`teachers`</span><span class="o">.</span><span class="n">`squad_id</span><span class="sb">` = `</span><span class="n">squads</span><span class="sb">`.`</span><span class="nb">id</span><span class="sb">` WHERE `</span><span class="n">squads</span><span class="sb">`.`</span><span class="n">school_id</span><span class="sb">` = 1</span>
</span><span class='line'>
</span><span class='line'><span class="sb"># grades belongs_to staff</span>
</span><span class='line'><span class="sb">has_many :grade_teachers, :through =&gt; :grades, :source =&gt; :staff  #年级组长</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种方式用得好真的好灵活</p>

<ul>
<li>group</li>
</ul>


<p>分组</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">School</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:students</span><span class="p">,</span> <span class="ss">:through</span> <span class="o">=&gt;</span> <span class="ss">:squads</span><span class="p">,</span> <span class="ss">:group</span> <span class="o">=&gt;</span> <span class="s1">&#39;squads.id&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="no">School</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">students</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 原理就是在数据库查询的时候加个分组group</span>
</span><span class='line'><span class="no">Student</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">81</span><span class="o">.</span><span class="mi">7</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="sb">`students`</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="sb">`students`</span> <span class="no">INNER</span> <span class="no">JOIN</span> <span class="sb">`squads`</span> <span class="no">ON</span> <span class="sb">`students`</span><span class="o">.</span><span class="n">`squad_id</span><span class="sb">` = `</span><span class="n">squads</span><span class="sb">`.`</span><span class="nb">id</span><span class="sb">` WHERE `</span><span class="n">squads</span><span class="sb">`.`</span><span class="n">school_id</span><span class="sb">` = 1 GROUP BY squads.id</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>:uniq</li>
</ul>


<p>确保查到的数据是唯一的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Squad</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:staffs</span><span class="p">,</span> <span class="ss">:through</span> <span class="o">=&gt;</span> <span class="ss">:teachers</span><span class="p">,</span> <span class="ss">:uniq</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:teachers</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Staff</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:squad</span><span class="p">,</span> <span class="ss">:through</span> <span class="o">=&gt;</span> <span class="ss">:teachers</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:teachers</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Teacher</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:squad</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:staff</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="no">Squad</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'><span class="n">staff</span> <span class="o">=</span> <span class="no">Staff</span><span class="o">.</span><span class="n">create</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">staff</span> <span class="o">&lt;</span> <span class="n">staff</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">staff</span> <span class="o">&lt;</span> <span class="n">staff</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 如果没有:unqi =&gt; true,将会输出多个staffs,数据库也是存在的(相同的数据),加上:unqi =&gt; true将只会输出一条数据,这样才符合逻辑</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">staff</span>
</span></code></pre></td></tr></table></div></figure>


<p>在rails 4用-> { distinct }</p>

<ul>
<li>除了这些参数还有<strong>:readonly</strong>, <strong>:order</strong>, <strong>:select</strong>, <strong>:limit</strong>, <strong>:offset</strong>等</li>
</ul>


<h3>Association Callbacks</h3>

<ul>
<li>before_add 添加前</li>
<li>after_add 添加后</li>
<li>before_remove 删除前</li>
<li>after_remove  删除后</li>
</ul>


<p>这是关联关系的Callbacks</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Squad</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:students</span><span class="p">,</span> <span class="ss">:after_add</span> <span class="o">=&gt;</span> <span class="ss">:update_accessed_at</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">update_accessed_at</span><span class="p">(</span><span class="n">student</span><span class="p">)</span>
</span><span class='line'>      <span class="n">student</span><span class="o">.</span><span class="n">accessed_at</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">utc</span>
</span><span class='line'>      <span class="n">student</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="no">Squad</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">students</span> <span class="o">&lt;&lt;</span> <span class="no">Student</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;学员&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>学会了这些,可以对数据库更加理解,而且减少代码量(减少自己写数据库查询),优化了代码</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails association]]></title>
    <link href="http://yinsigan.github.io/blog/2013/12/10/rails-association/"/>
    <updated>2013-12-10T13:13:00+08:00</updated>
    <id>http://yinsigan.github.io/blog/2013/12/10/rails-association</id>
    <content type="html"><![CDATA[<ul>
<li><a href="http://guides.rubyonrails.org/association_basics.html">rails guides association</a></li>
<li><a href="http://guides.rubyonrails.org/association_basics.html">rails api association</a></li>
<li><a href="http://ihower.tw/rails3/activerecord-relationships.html">rails 实战圣经-资料表关联</a></li>
<li><a href="http://railscasts.com/episodes/154-polymorphic-association">rails polymorphic-association</a></li>
</ul>


<h2>模型关联</h2>

<p>通过关键字(belongs_to, has_many等)把两个<strong>model</strong>(模型)关联起来,下面以我的开发经验和一些源码来解说每个模型关联</p>

<p>所有关键字如下:</p>

<ul>
<li>belongs_to</li>
<li>has_one</li>
<li>has_many</li>
<li>has_many :through</li>
<li>has_one :through</li>
<li>has_and_belongs_to_many</li>
</ul>


<h3>一对多</h3>

<p>通过<strong>has_many</strong>或<strong>has_many :through</strong>或自关联来定义,一个<strong>modelA</strong>有很多<strong>modelB</strong>,那些<strong>modelB</strong>都属于<strong>modelA</strong>例如一篇文章有很多评论, 一个班级有很多学员</p>

<h4>has_many</h4>

<p><img src="http://yinsigan.github.io/images/rails_association/has_many_and_belongs_to.png"></p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Comment</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:artilce</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Article</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:comments</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>comments</strong>表必须要有一个<strong>foreign_key</strong>(article_id)才能实现两个表的关联</p>

<h4>has_many :through</h4>

<p><img src="http://yinsigan.github.io/images/rails_association/has_many_through_three.png"></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="n">kindergarten</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:squads</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:students</span><span class="p">,</span> <span class="ss">:through</span> <span class="o">=&gt;</span> <span class="ss">:squads</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Squad</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:kindergarten</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:students</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Student</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:squad</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种方式适用于三层关系(祖,父,孙)的，而且在第三层不用写belongs_to第一层</p>

<h4>自关联(self join)</h4>

<p>foreign_key是可以指定你想要的任何字段,通过foreign_key我们可以实现自关联(Self Joins),即一个表中即定义了has_many又定义了belongs_to,例如<a href="http://yinsigan.github.io/blog/2013/12/09/acts-as-treeyuan-ma-fen-xi/">acts_as_tree</a>就是这样实现的,它是一个树结构,它是这样实现的</p>

<figure class='code'><figcaption><span>comment.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Comment</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span>   <span class="ss">:children</span><span class="p">,</span> <span class="ss">:class_name</span> <span class="o">=&gt;</span> <span class="s1">&#39;Comment&#39;</span><span class="p">,</span> <span class="ss">:foreign_key</span> <span class="o">=&gt;</span> <span class="ss">:parent_id</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:parent</span><span class="p">,</span>   <span class="ss">:class_name</span> <span class="o">=&gt;</span> <span class="s1">&#39;Comment&#39;</span><span class="p">,</span> <span class="ss">:foreign_key</span> <span class="o">=&gt;</span> <span class="ss">:parent_id</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>一对一</h3>

<p>通过<strong>has_one</strong>或<strong>has_one :through</strong>来定义,一个<strong>modelA</strong>有一个<strong>modelB</strong>, 那么<strong>modelB</strong>属于<strong>modelA</strong>,他们之间是一对一的关系,例如一个男人只有一个妻子,一个人只有一个身份证都是现实中一对一的关系</p>

<h4>has_one</h4>

<p><img src="http://yinsigan.github.io/images/rails_association/has_one_belongs_to.png"></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_one</span> <span class="ss">:profile</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Profile</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:user</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>一对一的关系也是要通过foreign_key来关联的</p>

<h4>has_one :through</h4>

<p><img src="http://yinsigan.github.io/images/rails_association/has_one_through.png"></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_one</span> <span class="ss">:profile</span>
</span><span class='line'>  <span class="n">has_one</span> <span class="ss">:proile_detail</span><span class="p">,</span> <span class="ss">:through</span> <span class="o">=&gt;</span> <span class="ss">:profile</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Profile</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:user</span>
</span><span class='line'>  <span class="n">has_one</span> <span class="ss">:proile_detail</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">ProfileDetail</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:profile</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个<strong>has_one :through</strong>的原理跟<strong>has_many :through</strong>的差不多,都是三级关系</p>

<h3>多对多</h3>

<p>能过<strong>has_many :through</strong>或<strong>has_many_and_belongs_to</strong>来定义,<strong>modelA</strong>有很多<strong>modelB</strong>,<strong>modelB</strong>也有很多<strong>modelA</strong>,它们之间是多对多的关系,例如人有很多的钱,钱属于很多人</p>

<h4>has_many :through</h4>

<p><img src="http://yinsigan.github.io/images/rails_association/has_many_through.png"></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Staff</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:teachers</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:squads</span><span class="p">,</span> <span class="ss">:through</span> <span class="o">=&gt;</span> <span class="ss">:teachers</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Squad</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:teachers</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:squads</span><span class="p">,</span> <span class="ss">:through</span> <span class="o">=&gt;</span> <span class="ss">:teachers</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Teacher</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:squad</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:staff</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>多对多的实现是要通过中间表的,而has_many :through这种方式的中间表有两个好处,第一个是表名你可以自己随便命名(比较人性化),第二个好处你可以在中间表上加属性</p>

<h4>has_many_and_belongs_to</h4>

<p><img src="http://yinsigan.github.io/images/rails_association/has_many_and_belongs_to.png"></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Role</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_and_belongs_to_many</span> <span class="ss">:operates</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Operate</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_and_belongs_to_many</span> <span class="ss">:roles</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种方式对中间表的命名是有规定的,连中间表的model也不用写,<strong>has_many_and_belongs_to</strong>是rails提供的,缺点是不能灵活控制,优点是方便</p>

<p>在migration创建表不创建id(没必要)</p>

<h3>Polymorphic Associations(多态)</h3>

<p>上述都是两个表进行关联,有的不需要中间表,有的不需要,如果要实现三个表以上的关联呢,这个时候就要用到多态了,例如我们不止在文章里可以加评论,在新闻里也可以评论,在贴子里都可以</p>

<p><img src="http://yinsigan.github.io/images/rails_association/polymorphic.png"></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Followable</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:followable</span><span class="p">,</span> <span class="ss">:polymorphic</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Book</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:follow</span><span class="p">,</span> <span class="ss">:as</span> <span class="o">=&gt;</span> <span class="ss">:followable</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:follow</span><span class="p">,</span> <span class="ss">:as</span> <span class="o">=&gt;</span> <span class="ss">:followable</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Comment</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:follow</span><span class="p">,</span> <span class="ss">:as</span> <span class="o">=&gt;</span> <span class="ss">:followable</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>多态的方法很灵活,它也需要一个中间表,但是他不止能关联一个表,而关联无数个表,在中间表中一个字段是存关联表的类型,一个存id,它通过这两个字段来实现关联所有表的</p>

<h3>单表继承</h3>

<p>有些模型的相似度达到百分之九十,甚至有些只有一个字段的值不同,没必要复制一遍model，再改不同的字段</p>

<p>这个时候可以用一个字段但存的值是不同的,这种方式可以的,只是因为类型不同,数据和逻辑不同,控制器即使写两套，还是要做各种判断,代码会变得很乱,很麻烦</p>

<p>这个时候一个好的解决方案就是用单表继承</p>

<p><img src="http://yinsigan.github.io/images/rails_association/single_table_inheritance.png"></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">GrowthRecord</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">HomeGrowthRecord</span> <span class="o">&lt;</span> <span class="no">GrowthRecord</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">GardenGrowthRecord</span> <span class="o">&lt;</span> <span class="no">GrowthRecord</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>GrowthRecord必须存一个字段叫type:string的,这个是自动处理的</p>

<p>如果不让GrowthRecord被实例化,可以加self.abstract_class = true,这样GrowthRecord就被锁住了</p>

<h2>总结</h2>

<p>学习这些可以让我们对rails association更理解,理解如何设计数据库,处理复杂的逻辑关系</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[acts_as_tree源码分析]]></title>
    <link href="http://yinsigan.github.io/blog/2013/12/09/acts-as-treeyuan-ma-fen-xi/"/>
    <updated>2013-12-09T14:30:00+08:00</updated>
    <id>http://yinsigan.github.io/blog/2013/12/09/acts-as-treeyuan-ma-fen-xi</id>
    <content type="html"><![CDATA[<ul>
<li><a href="https://github.com/amerine/acts_as_tree">acts_as_tree</a></li>
</ul>


<h3>这个gem是干什么的?原理是什么?</h3>

<p>这个gem是用来实现树型结构的,例如一个分类(category),下面还有子分类,这个时候就可以用它了,还有,你回复了一个贴子,别人再来回复你，这个时候也可以用它。一个菜单之下还有子菜单，子菜单之下又可以有子菜单,子菜单之下有菜单项，它可以实现一种树型结构的菜单。它的原理也很简单,在模型中是实现了一个自关联,假如在一个comment(评论)model中,定义一个children(孩子),再定义一个parent(父), :class_name都是&#8217;Comment&#8217;。那他们怎么实现关联的,也就是说孩子要知道父亲是谁,父亲要知道它有哪些孩子,它在数据存储中是通过一个字段来关联的,在这个gem中这个字段叫<strong>parent_id</strong>假如我们创建一个根(root), <code>root = Comment.create</code>, 这个时候<strong>root</strong>*的parent_id是null,它是一个根,<code>children = root.children.create</code>,这个<strong>children</strong>是<strong>root</strong>的一个孩子,那<strong>children</strong>的<strong>parent_id</strong>就是<strong>root</strong>的<strong>id</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  菜单
</span><span class='line'>   |_ 系统设置
</span><span class='line'>   |    |_ 模版设置
</span><span class='line'>   |    |_ 表格设置
</span><span class='line'>   |_ 人员管理
</span><span class='line'>        |_ 教职工管理
</span><span class='line'>        |_ 学员管理</span></code></pre></td></tr></table></div></figure>


<p>children和parent的关系是这样实现的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">belongs_to</span> <span class="ss">:parent</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="n">has_many</span>   <span class="ss">:children</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>数据表是这样存储的</p>

<!-- more -->


<p><img src="http://yinsigan.github.io/images/acts_as_tree_table.png"></p>

<h3>分析</h3>

<p>它的核心文件只有一个<strong>lib/acts_as_tree.rb</strong></p>

<figure class='code'><figcaption><span>lib/acts_as_tree.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;acts_as_tree/version&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">ActsAsTree</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">defined?</span> <span class="ss">Rails</span><span class="p">:</span><span class="ss">:Railtie</span>
</span><span class='line'>    <span class="nb">require</span> <span class="s1">&#39;acts_as_tree/railtie&#39;</span>
</span><span class='line'>  <span class="k">elsif</span> <span class="n">defined?</span> <span class="ss">Rails</span><span class="p">:</span><span class="ss">:Initializer</span>
</span><span class='line'>    <span class="k">raise</span> <span class="s2">&quot;acts_as_tree 1.0 is not compatible with Rails 2.3 or older&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">included</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>
</span><span class='line'>    <span class="n">base</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="no">ClassMethods</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Specify this +acts_as+ extension if you want to model a tree structure</span>
</span><span class='line'>  <span class="c1"># by providing a parent association and a children association. This</span>
</span><span class='line'>  <span class="c1"># requires that you have a foreign key column, which by default is called</span>
</span><span class='line'>  <span class="c1"># +parent_id+.</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1">#   class Category &lt; ActiveRecord::Base</span>
</span><span class='line'>  <span class="c1">#     include ActsAsTree</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1">#     acts_as_tree :order =&gt; &quot;name&quot;</span>
</span><span class='line'>  <span class="c1">#   end</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1">#   Example:</span>
</span><span class='line'>  <span class="c1">#   root</span>
</span><span class='line'>  <span class="c1">#    \_ child1</span>
</span><span class='line'>  <span class="c1">#         \_ subchild1</span>
</span><span class='line'>  <span class="c1">#         \_ subchild2</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1">#   root      = Category.create(&quot;name&quot; =&gt; &quot;root&quot;)</span>
</span><span class='line'>  <span class="c1">#   child1    = root.children.create(&quot;name&quot; =&gt; &quot;child1&quot;)</span>
</span><span class='line'>  <span class="c1">#   subchild1 = child1.children.create(&quot;name&quot; =&gt; &quot;subchild1&quot;)</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1">#   root.parent   # =&gt; nil</span>
</span><span class='line'>  <span class="c1">#   child1.parent # =&gt; root</span>
</span><span class='line'>  <span class="c1">#   root.children # =&gt; [child1]</span>
</span><span class='line'>  <span class="c1">#   root.children.first.children.first # =&gt; subchild1</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1"># In addition to the parent and children associations, the following</span>
</span><span class='line'>  <span class="c1"># instance methods are added to the class after calling</span>
</span><span class='line'>  <span class="c1"># &lt;tt&gt;acts_as_tree&lt;/tt&gt;:</span>
</span><span class='line'>  <span class="c1"># * &lt;tt&gt;siblings&lt;/tt&gt; - Returns all the children of the parent, excluding</span>
</span><span class='line'>  <span class="c1">#                       the current node (&lt;tt&gt;[subchild2]&lt;/tt&gt; when called</span>
</span><span class='line'>  <span class="c1">#                       on &lt;tt&gt;subchild1&lt;/tt&gt;)</span>
</span><span class='line'>  <span class="c1"># * &lt;tt&gt;self_and_siblings&lt;/tt&gt; - Returns all the children of the parent,</span>
</span><span class='line'>  <span class="c1">#                                including the current node (&lt;tt&gt;[subchild1, subchild2]&lt;/tt&gt;</span>
</span><span class='line'>  <span class="c1">#                                when called on &lt;tt&gt;subchild1&lt;/tt&gt;)</span>
</span><span class='line'>  <span class="c1"># * &lt;tt&gt;ancestors&lt;/tt&gt; - Returns all the ancestors of the current node</span>
</span><span class='line'>  <span class="c1">#                        (&lt;tt&gt;[child1, root]&lt;/tt&gt; when called on &lt;tt&gt;subchild2&lt;/tt&gt;)</span>
</span><span class='line'>  <span class="c1"># * &lt;tt&gt;root&lt;/tt&gt; - Returns the root of the current node (&lt;tt&gt;root&lt;/tt&gt;</span>
</span><span class='line'>  <span class="c1">#                   when called on &lt;tt&gt;subchild2&lt;/tt&gt;)</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">ClassMethods</span>
</span><span class='line'>    <span class="c1"># Configuration options are:</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># * &lt;tt&gt;foreign_key&lt;/tt&gt; - specifies the column name to use for tracking</span>
</span><span class='line'>    <span class="c1">#                          of the tree (default: +parent_id+)</span>
</span><span class='line'>    <span class="c1"># * &lt;tt&gt;order&lt;/tt&gt; - makes it possible to sort the children according to</span>
</span><span class='line'>    <span class="c1">#                    this SQL snippet.</span>
</span><span class='line'>    <span class="c1"># * &lt;tt&gt;counter_cache&lt;/tt&gt; - keeps a count in a +children_count+ column</span>
</span><span class='line'>    <span class="c1">#                            if set to +true+ (default: +false+).</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># 是通过这个方法来明确rails model association的(has_many belongs_to),而且这个方法会导入InstanceMethods model</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">acts_as_tree</span><span class="p">(</span><span class="n">options</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># 默认的配置选项, dependent当你删除节点时，连同子节点全部删除</span>
</span><span class='line'>      <span class="n">configuration</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">foreign_key</span><span class="p">:</span>   <span class="s2">&quot;parent_id&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">order</span><span class="p">:</span>         <span class="kp">nil</span><span class="p">,</span>
</span><span class='line'>        <span class="n">counter_cache</span><span class="p">:</span> <span class="kp">nil</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">dependent</span><span class="p">:</span>     <span class="ss">:destroy</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># 替换原来的方法或增加新的option</span>
</span><span class='line'>      <span class="n">configuration</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">options</span><span class="p">)</span> <span class="k">if</span> <span class="n">options</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="no">Hash</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># 定义一个自关联的parent, 如果设count_cache: true那就得在数据表中加入comments_count(comments是你的表名), foreign_key是parent_id，主要是通过它来关联parent和children</span>
</span><span class='line'>      <span class="n">belongs_to</span> <span class="ss">:parent</span><span class="p">,</span> <span class="n">class_name</span><span class="p">:</span>    <span class="nb">name</span><span class="p">,</span>
</span><span class='line'>        <span class="n">foreign_key</span><span class="p">:</span>   <span class="n">configuration</span><span class="o">[</span><span class="ss">:foreign_key</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>        <span class="n">counter_cache</span><span class="p">:</span> <span class="n">configuration</span><span class="o">[</span><span class="ss">:counter_cache</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>        <span class="n">inverse_of</span><span class="p">:</span>    <span class="ss">:children</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># 跟上述差不多,更多的可以看rails guides associations</span>
</span><span class='line'>      <span class="k">if</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:VERSION</span><span class="o">::</span><span class="no">MAJOR</span> <span class="o">&gt;=</span> <span class="mi">4</span>
</span><span class='line'>        <span class="n">has_many</span> <span class="ss">:children</span><span class="p">,</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="n">order</span> <span class="n">configuration</span><span class="o">[</span><span class="ss">:order</span><span class="o">]</span> <span class="p">},</span>
</span><span class='line'>          <span class="n">class_name</span><span class="p">:</span>  <span class="nb">name</span><span class="p">,</span>
</span><span class='line'>          <span class="n">foreign_key</span><span class="p">:</span> <span class="n">configuration</span><span class="o">[</span><span class="ss">:foreign_key</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>          <span class="ss">dependent</span><span class="p">:</span>   <span class="n">configuration</span><span class="o">[</span><span class="ss">:dependent</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>          <span class="n">inverse_of</span><span class="p">:</span>  <span class="ss">:parent</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">has_many</span> <span class="ss">:children</span><span class="p">,</span> <span class="n">class_name</span><span class="p">:</span>  <span class="nb">name</span><span class="p">,</span>
</span><span class='line'>          <span class="n">foreign_key</span><span class="p">:</span> <span class="n">configuration</span><span class="o">[</span><span class="ss">:foreign_key</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>          <span class="ss">order</span><span class="p">:</span>       <span class="n">configuration</span><span class="o">[</span><span class="ss">:order</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>          <span class="ss">dependent</span><span class="p">:</span>   <span class="n">configuration</span><span class="o">[</span><span class="ss">:dependent</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>          <span class="n">inverse_of</span><span class="p">:</span>  <span class="ss">:parent</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># 下面都是类的实例方法,相当于class &lt;&lt; self</span>
</span><span class='line'>      <span class="nb">class_eval</span> <span class="o">&lt;&lt;-</span><span class="no">EOV</span>
</span><span class='line'><span class="sh">        # 包含实例方法</span>
</span><span class='line'><span class="sh">        include ActsAsTree::InstanceMethods</span>
</span><span class='line'>
</span><span class='line'><span class="sh">        # update之后更新counter_cache, 关于create之后更新counter_cache是自动进行的</span>
</span><span class='line'><span class="sh">        after_update :update_parents_counter_cache</span>
</span><span class='line'>
</span><span class='line'><span class="sh">        # 以一个数组形式返回所有的根,可通过Comment.roots这样调用</span>
</span><span class='line'><span class="sh">        def self.roots</span>
</span><span class='line'><span class="sh">          # %Q的用法参考这里http://simpleror.wordpress.com/2009/03/15/q-q-w-w-x-r-s/</span>
</span><span class='line'><span class="sh">          # fetch是一个Hash的方法,对传过来的值作为key来取值,没有这个key就用第二个参数来代替</span>
</span><span class='line'><span class="sh">          # 在老版本的acts_as_tree中用#{configuration[:order].nil? ? &quot;nil&quot; : %Q{&quot;#{configuration[:order]}&quot;}},明显用fetch简洁好多</span>
</span><span class='line'><span class="sh">          order_option = %Q{#{configuration.fetch :order, &quot;nil&quot;}}</span>
</span><span class='line'><span class="sh">          # nil查询在老版本的acts_as_tree中用is NULL</span>
</span><span class='line'><span class="sh">          where(:#{configuration[:foreign_key]} =&gt; nil).order(order_option)</span>
</span><span class='line'><span class="sh">        end</span>
</span><span class='line'>
</span><span class='line'><span class="sh">        # 返回数据中的根</span>
</span><span class='line'><span class="sh">        def self.root</span>
</span><span class='line'><span class="sh">          order_option = %Q{#{configuration.fetch :order, &quot;nil&quot;}}</span>
</span><span class='line'><span class="sh">          self.roots.first</span>
</span><span class='line'><span class="sh">        end</span>
</span><span class='line'><span class="no">      EOV</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># extend Presentation,这个module下定义的都是类方法,用Comment.tree_view来调用</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Presentation</span>
</span><span class='line'>    <span class="c1"># show records in a tree view</span>
</span><span class='line'>    <span class="c1"># Example:</span>
</span><span class='line'>    <span class="c1"># root</span>
</span><span class='line'>    <span class="c1">#  |_ child1</span>
</span><span class='line'>    <span class="c1">#  |    |_ subchild1</span>
</span><span class='line'>    <span class="c1">#  |    |_ subchild2</span>
</span><span class='line'>    <span class="c1">#  |_ child2</span>
</span><span class='line'>    <span class="c1">#       |_ subchild3</span>
</span><span class='line'>    <span class="c1">#       |_ subchild4</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># 看上面的例子，用一种良好阅读的方式返回树的形状</span>
</span><span class='line'>    <span class="c1"># 树的遍历要用到递归</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">tree_view</span><span class="p">(</span><span class="n">label_method</span> <span class="o">=</span> <span class="ss">:to_s</span><span class="p">,</span>  <span class="n">node</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">,</span> <span class="n">level</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">node</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>        <span class="nb">puts</span> <span class="s2">&quot;root&quot;</span>
</span><span class='line'>        <span class="c1"># roots是个类方法,返回所有包含根节点的数组</span>
</span><span class='line'>        <span class="n">nodes</span> <span class="o">=</span> <span class="n">roots</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">label</span> <span class="o">=</span> <span class="s2">&quot;|_ </span><span class="si">#{</span><span class="n">node</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">label_method</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">level</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>          <span class="nb">puts</span> <span class="s2">&quot; </span><span class="si">#{</span><span class="n">label</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>          <span class="nb">puts</span> <span class="s2">&quot; |</span><span class="si">#{</span><span class="s2">&quot;    &quot;</span><span class="o">*</span><span class="n">level</span><span class="si">}#{</span><span class="n">label</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>        <span class="n">nodes</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="n">children</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="c1"># 1.首先默认传入node=nil, level=-1,这个时候会执行node.nil?，在第一行输出root,接着返回包含根节点的数组</span>
</span><span class='line'>      <span class="c1"># 2.遍历由根节点组成的数组,执行tree_view递归函数,而这个时候,node不等于nil,level=0,执行level == 0下面一句输出第一个根节点(类似|_root)</span>
</span><span class='line'>      <span class="c1"># 3.接着把这个根节点的孩子传给nodes去执行第二步, 这个node是不会等于nil的,level也将大于1,将会执行puts &quot; |#{&quot;    &quot;*level}#{label}&quot;这一行,在第二层树中level等于1,在输出时前面会空出一份空白,假如第二层树中有孩子,还会继续遍历,直到没有孩子</span>
</span><span class='line'>      <span class="n">nodes</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">child</span><span class="o">|</span>
</span><span class='line'>        <span class="n">tree_view</span><span class="p">(</span><span class="n">label_method</span><span class="p">,</span> <span class="n">child</span><span class="p">,</span> <span class="n">level</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># 下面定义都是实例方法</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">InstanceMethods</span>
</span><span class='line'>    <span class="c1"># Returns list of ancestors, starting from parent until root.</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1">#   subchild1.ancestors # =&gt; [child1, root]</span>
</span><span class='line'>    <span class="c1"># 返回祖先链</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">ancestors</span>
</span><span class='line'>      <span class="n">node</span><span class="p">,</span> <span class="n">nodes</span> <span class="o">=</span> <span class="nb">self</span><span class="p">,</span> <span class="o">[]</span>
</span><span class='line'>      <span class="n">nodes</span> <span class="o">&lt;&lt;</span> <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="n">parent</span> <span class="k">while</span> <span class="n">node</span><span class="o">.</span><span class="n">parent</span>
</span><span class='line'>      <span class="n">nodes</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Returns the root node of the tree.</span>
</span><span class='line'>    <span class="c1"># 返回根节点</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">root</span>
</span><span class='line'>      <span class="n">node</span> <span class="o">=</span> <span class="nb">self</span>
</span><span class='line'>      <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="n">parent</span> <span class="k">while</span> <span class="n">node</span><span class="o">.</span><span class="n">parent</span>
</span><span class='line'>      <span class="n">node</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Returns all siblings of the current node.</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1">#   subchild1.siblings # =&gt; [subchild2]</span>
</span><span class='line'>    <span class="c1"># 返回所有兄弟节点</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">siblings</span>
</span><span class='line'>      <span class="c1"># 减掉自己就是兄弟节点</span>
</span><span class='line'>      <span class="n">self_and_siblings</span> <span class="o">-</span> <span class="o">[</span><span class="nb">self</span><span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Returns all siblings and a reference to the current node.</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1">#   subchild1.self_and_siblings # =&gt; [subchild1, subchild2]</span>
</span><span class='line'>    <span class="c1"># 返回自身加上兄弟节点</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">self_and_siblings</span>
</span><span class='line'>      <span class="c1"># 如果不是根节点就把根节点的所有孩子都返回</span>
</span><span class='line'>      <span class="c1"># 否则的话就把所有根节点返回</span>
</span><span class='line'>      <span class="c1"># class能引用到自身的类</span>
</span><span class='line'>      <span class="n">parent</span> <span class="p">?</span> <span class="n">parent</span><span class="o">.</span><span class="n">children</span> <span class="p">:</span> <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">roots</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Returns children (without subchildren) and current node itself.</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1">#   root.self_and_children # =&gt; [root, child1]</span>
</span><span class='line'>    <span class="c1"># 返回自身和孩子</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">self_and_children</span>
</span><span class='line'>      <span class="o">[</span><span class="nb">self</span><span class="o">]</span> <span class="o">+</span> <span class="nb">self</span><span class="o">.</span><span class="n">children</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Returns ancestors and current node itself.</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1">#   subchild1.self_and_ancestors # =&gt; [subchild1, child1, root]</span>
</span><span class='line'>    <span class="c1"># 返回自己和祖先</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">self_and_ancestors</span>
</span><span class='line'>      <span class="o">[</span><span class="nb">self</span><span class="o">]</span> <span class="o">+</span> <span class="nb">self</span><span class="o">.</span><span class="n">ancestors</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Returns true if node has no parent, false otherwise</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1">#   subchild1.root? # =&gt; false</span>
</span><span class='line'>    <span class="c1">#   root.root?      # =&gt; true</span>
</span><span class='line'>    <span class="c1"># 判断是否是根节点</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">root?</span>
</span><span class='line'>      <span class="n">parent</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Returns true if node has no children, false otherwise</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1">#   subchild1.leaf? # =&gt; true</span>
</span><span class='line'>    <span class="c1">#   child1.leaf?    # =&gt; false</span>
</span><span class='line'>    <span class="c1"># 没有孩子了就是叶子节点</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">leaf?</span>
</span><span class='line'>      <span class="n">children</span><span class="o">.</span><span class="n">count</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># 为使这个方法生效必须有:counter_cache =&gt; :children_count和children_count这个字段,不然你自己可以重写这个方法, :counter_cache是可以自定义的,默认是children的表名加cache，例如comments_cache</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">update_parents_counter_cache</span>
</span><span class='line'>      <span class="c1"># 首先用respond_to?判断是否有这个方法(:children_count)</span>
</span><span class='line'>      <span class="c1"># 通过Active Model Dirty来判断是否改变了parent_id</span>
</span><span class='line'>      <span class="c1"># 关于Active Model Dirty可以看http://api.rubyonrails.org/classes/ActiveModel/Dirty.html</span>
</span><span class='line'>      <span class="k">if</span> <span class="nb">self</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="ss">:children_count</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">parent_id_changed?</span>
</span><span class='line'>        <span class="c1"># decrement_counter是给:children_count减少1, parent_id_was是旧的值</span>
</span><span class='line'>        <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">decrement_counter</span><span class="p">(</span><span class="ss">:children_count</span><span class="p">,</span> <span class="n">parent_id_was</span><span class="p">)</span>
</span><span class='line'>        <span class="c1"># increment_counter是给:children_count增加1, parent_id是新的值</span>
</span><span class='line'>        <span class="c1"># 具体的decrement_counter和increment_counter可以看http://api.rubyonrails.org/classes/ActiveRecord/CounterCache/ClassMethods.html</span>
</span><span class='line'>        <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">increment_counter</span><span class="p">(</span><span class="ss">:children_count</span><span class="p">,</span> <span class="n">parent_id</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Deprecating the following code in the future.</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;acts_as_tree/active_record/acts/tree&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>总结</h3>

<p>通过这个gem我们可以学一些查询方法,例如关于根节点，祖先节点的查找啊,还可以学习自关联的写法,一些递归写法等</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[acts_as_follower源码分析]]></title>
    <link href="http://yinsigan.github.io/blog/2013/12/03/acts-as-followeryuan-ma-fen-xi/"/>
    <updated>2013-12-03T16:41:00+08:00</updated>
    <id>http://yinsigan.github.io/blog/2013/12/03/acts-as-followeryuan-ma-fen-xi</id>
    <content type="html"><![CDATA[<ul>
<li><a href="https://github.com/tcocca/acts_as_follower">acts_as_follower</a></li>
</ul>


<h3>这个gem是做什么的?原理是什么?</h3>

<p>这个gem主要是用来实现类似twitter那种关注，新浪那种收听的功能
主要是两个model的关联,例如一个用户订阅了一本书,我们可以这样实现<code>User.first.follow(Book.first)</code></p>

<p>它在实现是就是利用两个多态，一个叫followable(被follow者), 一个叫followable(跟随者),把每个对象的类名字符串和id存进数据库实现关联,其他代码就实现了关于两者的查询代码, 下面是两者的关系</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">has_many</span> <span class="ss">:followings</span><span class="p">,</span> <span class="ss">:as</span> <span class="o">=&gt;</span> <span class="ss">:followable</span><span class="p">,</span> <span class="ss">:dependent</span> <span class="o">=&gt;</span> <span class="ss">:destroy</span><span class="p">,</span> <span class="ss">:class_name</span> <span class="o">=&gt;</span> <span class="s1">&#39;Follow&#39;</span>
</span><span class='line'><span class="n">has_many</span> <span class="ss">:follows</span><span class="p">,</span> <span class="ss">:as</span> <span class="o">=&gt;</span> <span class="ss">:follower</span><span class="p">,</span> <span class="ss">:dependent</span> <span class="o">=&gt;</span> <span class="ss">:destroy</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>follow.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">belongs_to</span> <span class="ss">:followable</span><span class="p">,</span> <span class="ss">:polymorphic</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="n">belongs_to</span> <span class="ss">:follower</span><span class="p">,</span>   <span class="ss">:polymorphic</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h3>来看一下它的数据结构</h3>

<p>目录树结构</p>

<p><img src="http://yinsigan.github.io/images/acts_as_follower_file_tree.png"></p>

<p>结构库表结构</p>

<p><img src="http://yinsigan.github.io/images/acts_as_follower_table_tree.png"></p>

<p>主要有五个字段,分别是<strong>blocked</strong>, <strong>followable_id</strong>, <strong>followable_type</strong>, <strong>follower_id</strong>, <strong>follower_type</strong>, 主要是分为两个多态(<strong>follower</strong>, <strong>followerable</strong>), 例如一个用户订阅了一本书, <strong>followerable</strong>可以存<strong>Book</strong>和它的<strong>id</strong>, 而<strong>follower</strong>这个多态存<strong>User</strong>和它的<strong>id</strong></p>

<hr />

<h3>接下来就来分晰啦</h3>

<h4>源码目录结构功能介绍</h4>

<!-- more -->


<ul>
<li>lib/acts_as_follower.rb: 主文件,主要定义了ActsAsFollower这个model(每个gem都会做差不多的事),还包括一些autoload语句，做的事主要是require你的所用到的rb文件啦</li>
</ul>


<figure class='code'><figcaption><span>lib/acts_as_follower</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;acts_as_follower/version&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">ActsAsFollower</span>
</span><span class='line'>  <span class="nb">autoload</span> <span class="ss">:Follower</span><span class="p">,</span>     <span class="s1">&#39;acts_as_follower/follower&#39;</span>
</span><span class='line'>  <span class="nb">autoload</span> <span class="ss">:Followable</span><span class="p">,</span>   <span class="s1">&#39;acts_as_follower/followable&#39;</span>
</span><span class='line'>  <span class="nb">autoload</span> <span class="ss">:FollowerLib</span><span class="p">,</span>  <span class="s1">&#39;acts_as_follower/follower_lib&#39;</span>
</span><span class='line'>  <span class="nb">autoload</span> <span class="ss">:FollowScopes</span><span class="p">,</span> <span class="s1">&#39;acts_as_follower/follow_scopes&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">require</span> <span class="s1">&#39;acts_as_follower/railtie&#39;</span> <span class="k">if</span> <span class="n">defined?</span><span class="p">(</span><span class="no">Rails</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="ss">Rails</span><span class="p">:</span><span class="ss">:VERSION</span><span class="o">::</span><span class="no">MAJOR</span> <span class="o">&gt;=</span> <span class="mi">3</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>lib/acts_as_follower/railtie.rb: 这个文件的作用就大了,在model(继承自<strong>ActiveRecord::Base</strong>)能使用<strong>acts_as_followable</strong>,<strong>acts_as_follower</strong>这个多亏了这个文件,其实这个文件使用了一个叫railtie的rails部件,它官方的定义是这样的:<strong>Railtie is the core of the Rails framework and provides several hooks to extend Rails and/or modify the initialization process</strong>, 它能修改一些启动信息,在加载ActiveRecord部件时执行<code>include ActsAsFollower::Follower</code>这样的语句,以后每个继承自ActiveRecord::Base的class都能使用ActsAsFollower::Follower下面定义的方法(而acts_as_follower就是在这个文件里定义的)，其实可以用类似这样的写法<code>ActiveRecord::Base.send(:include, Juixe::Acts::Commentable)</code>来实现相同的目的,关于rails railtie的详细信息可查看<a href="http://api.rubyonrails.org/classes/Rails/Railtie.html">rails railtie</a>和<a href="http://ihower.tw/blog/archives/4873">Rails3: Railtie 和 Plugins 系統</a></li>
</ul>


<figure class='code'><figcaption><span>lib/acts_as_follower/railtie.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;acts_as_follower&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;rails&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">ActsAsFollower</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Railtie</span> <span class="o">&lt;</span> <span class="ss">Rails</span><span class="p">:</span><span class="ss">:Railtie</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">initializer</span> <span class="s2">&quot;acts_as_follower.active_record&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">app</span><span class="o">|</span>
</span><span class='line'>      <span class="no">ActiveSupport</span><span class="o">.</span><span class="n">on_load</span> <span class="ss">:active_record</span> <span class="k">do</span>
</span><span class='line'>        <span class="kp">include</span> <span class="ss">ActsAsFollower</span><span class="p">:</span><span class="ss">:Follower</span>
</span><span class='line'>        <span class="kp">include</span> <span class="ss">ActsAsFollower</span><span class="p">:</span><span class="ss">:Followable</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>lib/acts_as_follower/followable.rb: 这个文件主要服务于被follow的对象,它定义了好多用于被<strong>follow</strong>的实例方法,包括<strong>followers_by_type</strong>, <strong>followers_count</strong>,它是这样来调用的,例如<code>Book.first.followers_count</code>, <code>Book.first.followers_by_type('User')</code></li>
</ul>


<figure class='code'><figcaption><span>lib/acts_as_follower/followable.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 被follow</span>
</span><span class='line'><span class="k">module</span> <span class="nn">ActsAsFollower</span> <span class="c1">#:nodoc:</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># 由上面可知ActiveRecord会include下面的Followable</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Followable</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># 这种写法很常见</span>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">included</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>
</span><span class='line'>      <span class="n">base</span><span class="o">.</span><span class="n">extend</span> <span class="no">ClassMethods</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># ClassMethods下面定义的是实例方法,ActiveRecord::Base可直接用，也就是说可以直接在继承自ActiveRecord::Base的model下用</span>
</span><span class='line'>    <span class="k">module</span> <span class="nn">ClassMethods</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">acts_as_followable</span>
</span><span class='line'>        <span class="n">has_many</span> <span class="ss">:followings</span><span class="p">,</span> <span class="ss">:as</span> <span class="o">=&gt;</span> <span class="ss">:followable</span><span class="p">,</span> <span class="ss">:dependent</span> <span class="o">=&gt;</span> <span class="ss">:destroy</span><span class="p">,</span> <span class="ss">:class_name</span> <span class="o">=&gt;</span> <span class="s1">&#39;Follow&#39;</span>
</span><span class='line'>        <span class="c1"># 下面的实例方法</span>
</span><span class='line'>        <span class="kp">include</span> <span class="ss">ActsAsFollower</span><span class="p">:</span><span class="ss">:Followable</span><span class="o">::</span><span class="no">InstanceMethods</span>
</span><span class='line'>        <span class="c1"># 这个下文有说</span>
</span><span class='line'>        <span class="kp">include</span> <span class="ss">ActsAsFollower</span><span class="p">:</span><span class="ss">:FollowerLib</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># 下面的都是实例方法可用于被follow的实例来调用,下面的self都是被follow对象的实例</span>
</span><span class='line'>    <span class="k">module</span> <span class="nn">InstanceMethods</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># Returns the number of followers a record has.</span>
</span><span class='line'>      <span class="c1"># 返回followins的数量,而unblocked在lib/acts_as_followable/follow_scope.rb定义,只是一个简单的where scope</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">followers_count</span>
</span><span class='line'>        <span class="nb">self</span><span class="o">.</span><span class="n">followings</span><span class="o">.</span><span class="n">unblocked</span><span class="o">.</span><span class="n">count</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># Returns the followers by a given type</span>
</span><span class='line'>      <span class="c1"># 下面主要是一个查询语句,constantize的定义见http://api.rubyonrails.org/classes/ActiveSupport/Inflector.html</span>
</span><span class='line'>      <span class="c1"># 而parent_class_name的定义在lib/acts_as_followable/follower_lib.rb,很简单,主要是返回class名字</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">followers_by_type</span><span class="p">(</span><span class="n">follower_type</span><span class="p">,</span> <span class="n">options</span><span class="o">=</span><span class="p">{})</span>
</span><span class='line'>        <span class="c1"># parent_class_name是把一个实例转成类的字符串,例如&#39;Topic&#39;, &#39;Article&#39;等</span>
</span><span class='line'>        <span class="n">follows</span> <span class="o">=</span> <span class="n">follower_type</span><span class="o">.</span><span class="n">constantize</span><span class="o">.</span>
</span><span class='line'>          <span class="n">joins</span><span class="p">(</span><span class="ss">:follows</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>          <span class="n">where</span><span class="p">(</span><span class="s1">&#39;follows.blocked&#39;</span>         <span class="o">=&gt;</span> <span class="kp">false</span><span class="p">,</span>
</span><span class='line'>                <span class="s1">&#39;follows.followable_id&#39;</span>   <span class="o">=&gt;</span> <span class="nb">self</span><span class="o">.</span><span class="n">id</span><span class="p">,</span>
</span><span class='line'>                <span class="s1">&#39;follows.followable_type&#39;</span> <span class="o">=&gt;</span> <span class="n">parent_class_name</span><span class="p">(</span><span class="nb">self</span><span class="p">),</span>
</span><span class='line'>                <span class="s1">&#39;follows.follower_type&#39;</span>   <span class="o">=&gt;</span> <span class="n">follower_type</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">options</span><span class="o">.</span><span class="n">has_key?</span><span class="p">(</span><span class="ss">:limit</span><span class="p">)</span>
</span><span class='line'>          <span class="n">follows</span> <span class="o">=</span> <span class="n">follows</span><span class="o">.</span><span class="n">limit</span><span class="p">(</span><span class="n">options</span><span class="o">[</span><span class="ss">:limit</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">options</span><span class="o">.</span><span class="n">has_key?</span><span class="p">(</span><span class="ss">:includes</span><span class="p">)</span>
</span><span class='line'>          <span class="n">follows</span> <span class="o">=</span> <span class="n">follows</span><span class="o">.</span><span class="n">includes</span><span class="p">(</span><span class="n">options</span><span class="o">[</span><span class="ss">:includes</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>        <span class="n">follows</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># 返回所有follower的数量</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">followers_by_type_count</span><span class="p">(</span><span class="n">follower_type</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">self</span><span class="o">.</span><span class="n">followings</span><span class="o">.</span><span class="n">unblocked</span><span class="o">.</span><span class="n">for_follower_type</span><span class="p">(</span><span class="n">follower_type</span><span class="p">)</span><span class="o">.</span><span class="n">count</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># Allows magic names on followers_by_type</span>
</span><span class='line'>      <span class="c1"># e.g. user_followers == followers_by_type(&#39;User&#39;)</span>
</span><span class='line'>      <span class="c1"># Allows magic names on followers_by_type_count</span>
</span><span class='line'>      <span class="c1"># e.g. count_user_followers == followers_by_type_count(&#39;User&#39;)</span>
</span><span class='line'>      <span class="c1"># 实现更加灵活的查询</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">m</span><span class="o">.</span><span class="n">to_s</span><span class="o">[</span><span class="sr">/count_(.+)_followers/</span><span class="o">]</span>
</span><span class='line'>          <span class="n">followers_by_type_count</span><span class="p">(</span><span class="vg">$1</span><span class="o">.</span><span class="n">singularize</span><span class="o">.</span><span class="n">classify</span><span class="p">)</span>
</span><span class='line'>        <span class="k">elsif</span> <span class="n">m</span><span class="o">.</span><span class="n">to_s</span><span class="o">[</span><span class="sr">/(.+)_followers/</span><span class="o">]</span>
</span><span class='line'>          <span class="n">followers_by_type</span><span class="p">(</span><span class="vg">$1</span><span class="o">.</span><span class="n">singularize</span><span class="o">.</span><span class="n">classify</span><span class="p">)</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>          <span class="k">super</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># 返回follow的数量</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">blocked_followers_count</span>
</span><span class='line'>        <span class="nb">self</span><span class="o">.</span><span class="n">followings</span><span class="o">.</span><span class="n">blocked</span><span class="o">.</span><span class="n">count</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># Returns the followings records scoped</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">followers_scoped</span>
</span><span class='line'>        <span class="c1"># 因为follow belongs_to follower</span>
</span><span class='line'>        <span class="nb">self</span><span class="o">.</span><span class="n">followings</span><span class="o">.</span><span class="n">includes</span><span class="p">(</span><span class="ss">:follower</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># apply_options_to_scope是定义在lib/acts_as_followable/follower_lib.rb的一个方法,只要是过滤参数,把参数提取加到where scope中</span>
</span><span class='line'>      <span class="c1"># 返回所有followers</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">followers</span><span class="p">(</span><span class="n">options</span><span class="o">=</span><span class="p">{})</span>
</span><span class='line'>        <span class="n">followers_scope</span> <span class="o">=</span> <span class="n">followers_scoped</span><span class="o">.</span><span class="n">unblocked</span>
</span><span class='line'>        <span class="n">followers_scope</span> <span class="o">=</span> <span class="n">apply_options_to_scope</span><span class="p">(</span><span class="n">followers_scope</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span>
</span><span class='line'>        <span class="c1"># 取出所有follower</span>
</span><span class='line'>        <span class="n">followers_scope</span><span class="o">.</span><span class="n">to_a</span><span class="o">.</span><span class="n">collect</span><span class="p">{</span><span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="n">f</span><span class="o">.</span><span class="n">follower</span><span class="p">}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">blocks</span><span class="p">(</span><span class="n">options</span><span class="o">=</span><span class="p">{})</span>
</span><span class='line'>        <span class="n">blocked_followers_scope</span> <span class="o">=</span> <span class="n">followers_scoped</span><span class="o">.</span><span class="n">blocked</span>
</span><span class='line'>        <span class="n">blocked_followers_scope</span> <span class="o">=</span> <span class="n">apply_options_to_scope</span><span class="p">(</span><span class="n">blocked_followers_scope</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span>
</span><span class='line'>        <span class="n">blocked_followers_scope</span><span class="o">.</span><span class="n">to_a</span><span class="o">.</span><span class="n">collect</span><span class="p">{</span><span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="n">f</span><span class="o">.</span><span class="n">follower</span><span class="p">}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># Returns true if the current instance is followed by the passed record</span>
</span><span class='line'>      <span class="c1"># Returns false if the current instance is blocked by the passed record or no follow is found</span>
</span><span class='line'>      <span class="c1"># 查看是否被follow</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">followed_by?</span><span class="p">(</span><span class="n">follower</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">self</span><span class="o">.</span><span class="n">followings</span><span class="o">.</span><span class="n">unblocked</span><span class="o">.</span><span class="n">for_follower</span><span class="p">(</span><span class="n">follower</span><span class="p">)</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">present?</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># 如果查到记录就变成true，没有就创建那条记录</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">block</span><span class="p">(</span><span class="n">follower</span><span class="p">)</span>
</span><span class='line'>        <span class="n">get_follow_for</span><span class="p">(</span><span class="n">follower</span><span class="p">)</span> <span class="p">?</span> <span class="n">block_existing_follow</span><span class="p">(</span><span class="n">follower</span><span class="p">)</span> <span class="p">:</span> <span class="n">block_future_follow</span><span class="p">(</span><span class="n">follower</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># 把following的记录删除</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">unblock</span><span class="p">(</span><span class="n">follower</span><span class="p">)</span>
</span><span class='line'>        <span class="n">get_follow_for</span><span class="p">(</span><span class="n">follower</span><span class="p">)</span><span class="o">.</span><span class="n">try</span><span class="p">(</span><span class="ss">:delete</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># 返回是否被follower, for_follower是个where scope</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">get_follow_for</span><span class="p">(</span><span class="n">follower</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">self</span><span class="o">.</span><span class="n">followings</span><span class="o">.</span><span class="n">for_follower</span><span class="p">(</span><span class="n">follower</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># 创建following记录</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">block_future_follow</span><span class="p">(</span><span class="n">follower</span><span class="p">)</span>
</span><span class='line'>        <span class="no">Follow</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:followable</span> <span class="o">=&gt;</span> <span class="nb">self</span><span class="p">,</span> <span class="ss">:follower</span> <span class="o">=&gt;</span> <span class="n">follower</span><span class="p">,</span> <span class="ss">:blocked</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># block!会把blocked属性变成true</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">block_existing_follow</span><span class="p">(</span><span class="n">follower</span><span class="p">)</span>
</span><span class='line'>        <span class="n">get_follow_for</span><span class="p">(</span><span class="n">follower</span><span class="p">)</span><span class="o">.</span><span class="n">block!</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>lib/acts_as_follower/follower.rb: 这是一个关于<strong>follower</strong>(叫做跟随者), 跟<strong>followable.rb</strong>的作用差不多，只是是反过来的</li>
</ul>


<figure class='code'><figcaption><span>lib/acts_as_follower/follower.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">ActsAsFollower</span> <span class="c1">#:nodoc:</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Follower</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># active_record会include</span>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">included</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>
</span><span class='line'>      <span class="n">base</span><span class="o">.</span><span class="n">extend</span> <span class="no">ClassMethods</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">module</span> <span class="nn">ClassMethods</span>
</span><span class='line'>      <span class="c1"># 在model里就可以用acts_as_follower</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">acts_as_follower</span>
</span><span class='line'>        <span class="n">has_many</span> <span class="ss">:follows</span><span class="p">,</span> <span class="ss">:as</span> <span class="o">=&gt;</span> <span class="ss">:follower</span><span class="p">,</span> <span class="ss">:dependent</span> <span class="o">=&gt;</span> <span class="ss">:destroy</span>
</span><span class='line'>        <span class="c1"># 具体类加载实例方法</span>
</span><span class='line'>        <span class="kp">include</span> <span class="ss">ActsAsFollower</span><span class="p">:</span><span class="ss">:Follower</span><span class="o">::</span><span class="no">InstanceMethods</span>
</span><span class='line'>        <span class="c1"># 具体类加载FollowerLib库方法</span>
</span><span class='line'>        <span class="kp">include</span> <span class="ss">ActsAsFollower</span><span class="p">:</span><span class="ss">:FollowerLib</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">module</span> <span class="nn">InstanceMethods</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># Returns true if this instance is following the object passed as an argument.</span>
</span><span class='line'>      <span class="c1"># 是否following某个followable</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">following?</span><span class="p">(</span><span class="n">followable</span><span class="p">)</span>
</span><span class='line'>        <span class="mi">0</span> <span class="o">&lt;</span> <span class="no">Follow</span><span class="o">.</span><span class="n">unblocked</span><span class="o">.</span><span class="n">for_follower</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span><span class="o">.</span><span class="n">for_followable</span><span class="p">(</span><span class="n">followable</span><span class="p">)</span><span class="o">.</span><span class="n">count</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># Returns the number of objects this instance is following.</span>
</span><span class='line'>      <span class="c1"># 在数据表中查看这个follower总共跟随了多少followable</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">follow_count</span>
</span><span class='line'>        <span class="no">Follow</span><span class="o">.</span><span class="n">unblocked</span><span class="o">.</span><span class="n">for_follower</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span><span class="o">.</span><span class="n">count</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># Creates a new follow record for this instance to follow the passed object.</span>
</span><span class='line'>      <span class="c1"># Does not allow duplicate records to be created.</span>
</span><span class='line'>      <span class="c1"># follow某followable</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">follow</span><span class="p">(</span><span class="n">followable</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="nb">self</span> <span class="o">!=</span> <span class="n">followable</span>
</span><span class='line'>          <span class="nb">self</span><span class="o">.</span><span class="n">follows</span><span class="o">.</span><span class="n">find_or_create_by</span><span class="p">(</span><span class="n">followable_id</span><span class="p">:</span> <span class="n">followable</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="n">followable_type</span><span class="p">:</span> <span class="n">parent_class_name</span><span class="p">(</span><span class="n">followable</span><span class="p">))</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># Deletes the follow record if it exists.</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">stop_following</span><span class="p">(</span><span class="n">followable</span><span class="p">)</span>
</span><span class='line'>        <span class="c1"># get_follow是用followable来找到那条follow记录然后把它删除掉</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">follow</span> <span class="o">=</span> <span class="n">get_follow</span><span class="p">(</span><span class="n">followable</span><span class="p">)</span>
</span><span class='line'>          <span class="n">follow</span><span class="o">.</span><span class="n">destroy</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># returns the follows records to the current instance</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">follows_scoped</span>
</span><span class='line'>        <span class="nb">self</span><span class="o">.</span><span class="n">follows</span><span class="o">.</span><span class="n">unblocked</span><span class="o">.</span><span class="n">includes</span><span class="p">(</span><span class="ss">:followable</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># Returns the follow records related to this instance by type.</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">follows_by_type</span><span class="p">(</span><span class="n">followable_type</span><span class="p">,</span> <span class="n">options</span><span class="o">=</span><span class="p">{})</span>
</span><span class='line'>        <span class="n">follows_scope</span>  <span class="o">=</span> <span class="n">follows_scoped</span><span class="o">.</span><span class="n">for_followable_type</span><span class="p">(</span><span class="n">followable_type</span><span class="p">)</span>
</span><span class='line'>        <span class="n">follows_scope</span> <span class="o">=</span> <span class="n">apply_options_to_scope</span><span class="p">(</span><span class="n">follows_scope</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># Returns the follow records related to this instance with the followable included.</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">all_follows</span><span class="p">(</span><span class="n">options</span><span class="o">=</span><span class="p">{})</span>
</span><span class='line'>        <span class="n">follows_scope</span> <span class="o">=</span> <span class="n">follows_scoped</span>
</span><span class='line'>        <span class="n">follows_scope</span> <span class="o">=</span> <span class="n">apply_options_to_scope</span><span class="p">(</span><span class="n">follows_scope</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># Returns the actual records which this instance is following.</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">all_following</span><span class="p">(</span><span class="n">options</span><span class="o">=</span><span class="p">{})</span>
</span><span class='line'>        <span class="n">all_follows</span><span class="p">(</span><span class="n">options</span><span class="p">)</span><span class="o">.</span><span class="n">collect</span><span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="n">f</span><span class="o">.</span><span class="n">followable</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># Returns the actual records of a particular type which this record is following.</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">following_by_type</span><span class="p">(</span><span class="n">followable_type</span><span class="p">,</span> <span class="n">options</span><span class="o">=</span><span class="p">{})</span>
</span><span class='line'>        <span class="n">followables</span> <span class="o">=</span> <span class="n">followable_type</span><span class="o">.</span><span class="n">constantize</span><span class="o">.</span>
</span><span class='line'>          <span class="n">joins</span><span class="p">(</span><span class="ss">:followings</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>          <span class="n">where</span><span class="p">(</span><span class="s1">&#39;follows.blocked&#39;</span>         <span class="o">=&gt;</span> <span class="kp">false</span><span class="p">,</span>
</span><span class='line'>                <span class="s1">&#39;follows.follower_id&#39;</span>     <span class="o">=&gt;</span> <span class="nb">self</span><span class="o">.</span><span class="n">id</span><span class="p">,</span>
</span><span class='line'>                <span class="s1">&#39;follows.follower_type&#39;</span>   <span class="o">=&gt;</span> <span class="n">parent_class_name</span><span class="p">(</span><span class="nb">self</span><span class="p">),</span>
</span><span class='line'>                <span class="s1">&#39;follows.followable_type&#39;</span> <span class="o">=&gt;</span> <span class="n">followable_type</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">options</span><span class="o">.</span><span class="n">has_key?</span><span class="p">(</span><span class="ss">:limit</span><span class="p">)</span>
</span><span class='line'>          <span class="n">followables</span> <span class="o">=</span> <span class="n">followables</span><span class="o">.</span><span class="n">limit</span><span class="p">(</span><span class="n">options</span><span class="o">[</span><span class="ss">:limit</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">options</span><span class="o">.</span><span class="n">has_key?</span><span class="p">(</span><span class="ss">:includes</span><span class="p">)</span>
</span><span class='line'>          <span class="n">followables</span> <span class="o">=</span> <span class="n">followables</span><span class="o">.</span><span class="n">includes</span><span class="p">(</span><span class="n">options</span><span class="o">[</span><span class="ss">:includes</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>        <span class="n">followables</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">following_by_type_count</span><span class="p">(</span><span class="n">followable_type</span><span class="p">)</span>
</span><span class='line'>        <span class="n">follows</span><span class="o">.</span><span class="n">unblocked</span><span class="o">.</span><span class="n">for_followable_type</span><span class="p">(</span><span class="n">followable_type</span><span class="p">)</span><span class="o">.</span><span class="n">count</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># Allows magic names on following_by_type</span>
</span><span class='line'>      <span class="c1"># e.g. following_users == following_by_type(&#39;User&#39;)</span>
</span><span class='line'>      <span class="c1"># Allows magic names on following_by_type_count</span>
</span><span class='line'>      <span class="c1"># e.g. following_users_count == following_by_type_count(&#39;User&#39;)</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">m</span><span class="o">.</span><span class="n">to_s</span><span class="o">[</span><span class="sr">/following_(.+)_count/</span><span class="o">]</span>
</span><span class='line'>          <span class="n">following_by_type_count</span><span class="p">(</span><span class="vg">$1</span><span class="o">.</span><span class="n">singularize</span><span class="o">.</span><span class="n">classify</span><span class="p">)</span>
</span><span class='line'>        <span class="k">elsif</span> <span class="n">m</span><span class="o">.</span><span class="n">to_s</span><span class="o">[</span><span class="sr">/following_(.+)/</span><span class="o">]</span>
</span><span class='line'>          <span class="n">following_by_type</span><span class="p">(</span><span class="vg">$1</span><span class="o">.</span><span class="n">singularize</span><span class="o">.</span><span class="n">classify</span><span class="p">)</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>          <span class="k">super</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># Returns a follow record for the current instance and followable object.</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">get_follow</span><span class="p">(</span><span class="n">followable</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">self</span><span class="o">.</span><span class="n">follows</span><span class="o">.</span><span class="n">unblocked</span><span class="o">.</span><span class="n">for_followable</span><span class="p">(</span><span class="n">followable</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>lib/acts_as_follower/follow_scopes.rb: 这里封装的都是一些查询语句,在<strong>follow.rb</strong>文件里有一句<code>extend ActsAsFollower::FollowScopes</code>可以在实例上使用这些方法</li>
</ul>


<figure class='code'><figcaption><span>lib/acts_as_follower/follow_scopes.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">ActsAsFollower</span> <span class="c1">#:nodoc:</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">FollowScopes</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">for_follower</span><span class="p">(</span><span class="n">follower</span><span class="p">)</span>
</span><span class='line'>      <span class="n">where</span><span class="p">(</span><span class="ss">:follower_id</span> <span class="o">=&gt;</span> <span class="n">follower</span><span class="o">.</span><span class="n">id</span><span class="p">,</span>
</span><span class='line'>            <span class="ss">:follower_type</span> <span class="o">=&gt;</span> <span class="n">parent_class_name</span><span class="p">(</span><span class="n">follower</span><span class="p">))</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">for_followable</span><span class="p">(</span><span class="n">followable</span><span class="p">)</span>
</span><span class='line'>      <span class="n">where</span><span class="p">(</span><span class="ss">:followable_id</span> <span class="o">=&gt;</span> <span class="n">followable</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="ss">:followable_type</span> <span class="o">=&gt;</span> <span class="n">parent_class_name</span><span class="p">(</span><span class="n">followable</span><span class="p">))</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">for_follower_type</span><span class="p">(</span><span class="n">follower_type</span><span class="p">)</span>
</span><span class='line'>      <span class="n">where</span><span class="p">(</span><span class="ss">:follower_type</span> <span class="o">=&gt;</span> <span class="n">follower_type</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">for_followable_type</span><span class="p">(</span><span class="n">followable_type</span><span class="p">)</span>
</span><span class='line'>      <span class="n">where</span><span class="p">(</span><span class="ss">:followable_type</span> <span class="o">=&gt;</span> <span class="n">followable_type</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">recent</span><span class="p">(</span><span class="n">from</span><span class="p">)</span>
</span><span class='line'>      <span class="n">where</span><span class="p">(</span><span class="o">[</span><span class="s2">&quot;created_at &gt; ?&quot;</span><span class="p">,</span> <span class="p">(</span><span class="n">from</span> <span class="o">||</span> <span class="mi">2</span><span class="o">.</span><span class="n">weeks</span><span class="o">.</span><span class="n">ago</span><span class="p">)</span><span class="o">.</span><span class="n">to_s</span><span class="p">(</span><span class="ss">:db</span><span class="p">)</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">descending</span>
</span><span class='line'>      <span class="n">order</span><span class="p">(</span><span class="s2">&quot;follows.created_at DESC&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">unblocked</span>
</span><span class='line'>      <span class="n">where</span><span class="p">(</span><span class="ss">:blocked</span> <span class="o">=&gt;</span> <span class="kp">false</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">blocked</span>
</span><span class='line'>      <span class="n">where</span><span class="p">(</span><span class="ss">:blocked</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>lib/acts_as_follower/follower_lib.rb: 这里封装了两个方法,上文有讲过,<strong>follow.rb</strong>文件里有一句<code>extend ActsAsFollower::FollowerLib</code></li>
</ul>


<figure class='code'><figcaption><span>lib/acts_as_follower/follower_lib.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">ActsAsFollower</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">FollowerLib</span>
</span><span class='line'>
</span><span class='line'>    <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Retrieves the parent class name if using STI.</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">parent_class_name</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">obj</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">superclass</span> <span class="o">!=</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">obj</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">superclass</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">obj</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">apply_options_to_scope</span><span class="p">(</span><span class="n">scope</span><span class="p">,</span> <span class="n">options</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">options</span><span class="o">.</span><span class="n">has_key?</span><span class="p">(</span><span class="ss">:limit</span><span class="p">)</span>
</span><span class='line'>        <span class="n">scope</span> <span class="o">=</span> <span class="n">scope</span><span class="o">.</span><span class="n">limit</span><span class="p">(</span><span class="n">options</span><span class="o">[</span><span class="ss">:limit</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">options</span><span class="o">.</span><span class="n">has_key?</span><span class="p">(</span><span class="ss">:includes</span><span class="p">)</span>
</span><span class='line'>        <span class="n">scope</span> <span class="o">=</span> <span class="n">scope</span><span class="o">.</span><span class="n">includes</span><span class="p">(</span><span class="n">options</span><span class="o">[</span><span class="ss">:includes</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">options</span><span class="o">.</span><span class="n">has_key?</span><span class="p">(</span><span class="ss">:joins</span><span class="p">)</span>
</span><span class='line'>        <span class="n">scope</span> <span class="o">=</span> <span class="n">scope</span><span class="o">.</span><span class="n">joins</span><span class="p">(</span><span class="n">options</span><span class="o">[</span><span class="ss">:joins</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">options</span><span class="o">.</span><span class="n">has_key?</span><span class="p">(</span><span class="ss">:where</span><span class="p">)</span>
</span><span class='line'>        <span class="n">scope</span> <span class="o">=</span> <span class="n">scope</span><span class="o">.</span><span class="n">order</span><span class="p">(</span><span class="n">options</span><span class="o">[</span><span class="ss">:where</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">options</span><span class="o">.</span><span class="n">has_key?</span><span class="p">(</span><span class="ss">:order</span><span class="p">)</span>
</span><span class='line'>        <span class="n">scope</span> <span class="o">=</span> <span class="n">scope</span><span class="o">.</span><span class="n">order</span><span class="p">(</span><span class="n">options</span><span class="o">[</span><span class="ss">:order</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">scope</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>lib/acts_as_follower/generators/templates/follow.rb: 这个文件是用来生成模版的,生成的是一个model文件,放在app/models下,它是一个中间表,是所有<strong>follower</strong>和<strong>followable</strong>的链接点</li>
</ul>


<figure class='code'><figcaption><span>app/models/follow.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Follow</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">extend</span> <span class="ss">ActsAsFollower</span><span class="p">:</span><span class="ss">:FollowerLib</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="ss">ActsAsFollower</span><span class="p">:</span><span class="ss">:FollowScopes</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># NOTE: Follows belong to the &quot;followable&quot; interface, and also to followers</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:followable</span><span class="p">,</span> <span class="ss">:polymorphic</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:follower</span><span class="p">,</span>   <span class="ss">:polymorphic</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">block!</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">update_attribute</span><span class="p">(</span><span class="ss">:blocked</span><span class="p">,</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>总结</h3>

<p>学会组织代码的能力和一些rails的内部的东西,学习这个gem查询一些数据的方法,还有双重多态的写法</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Acts As Commentable source analyse]]></title>
    <link href="http://yinsigan.github.io/blog/2013/11/26/acts-as-commentable-source-analyse/"/>
    <updated>2013-11-26T11:49:00+08:00</updated>
    <id>http://yinsigan.github.io/blog/2013/11/26/acts-as-commentable-source-analyse</id>
    <content type="html"><![CDATA[<ul>
<li><a href="https://github.com/jackdempsey/acts_as_commentable">acts_as_commentable</a></li>
</ul>


<h3>这个gem是做什么的?原理是什么?</h3>

<p>这个gem是用来实现评论,它跟一般的评论没什么区别,只是这个gem把一些代码进行了封装,这是我们可以学习的地方.</p>

<p>它使用也很简单,只要在model里写上<code>acts_as_commentable</code>,就可以使用评论了,其实<code>acts_as_commentable</code>在实现上就等于
<code>has_many :comments, :as =&gt; :commentable</code>, comment这个model是一个简单的多态,它在数据表中的存储是这样的。</p>

<p><img src="http://yinsigan.github.io/images/acts_as_comment_table.png"></p>

<p>其实最主要的就是两个字段commentable_id, commentable_type,一个简单的多态</p>

<p>由于<code>has_many :comments</code>那就可以进行很多操作，例如创建一条评论</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Post</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">comments</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:title</span> <span class="o">=&gt;</span> <span class="s2">&quot;First comment.&quot;</span><span class="p">,</span> <span class="ss">:comment</span> <span class="o">=&gt;</span> <span class="s2">&quot;This is the first comment.&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>经过这样的操作之后,在数据库中就会产生如下如果</p>

<p><img src="http://yinsigan.github.io/images/acts_as_comment_table_result.png"></p>

<p>而这个存储方式是由rails自动处理的,更多的rails关系模型可查看<a href="http://guides.rubyonrails.org/association_basics.html">rails guides</a></p>

<h4>分析</h4>

<p>源码目录下如下</p>

<p><img src="http://yinsigan.github.io/images/acts_as_commentable_file_tree.png"></p>

<p>这一步会生成一个rails migration文件和一个叫comment.rb的rails model文件</p>

<p>原理很简单,会在数据库中生成一个叫comments的表
它的字段包括title, comment, commentable_type, commentable_id, user_id等</p>

<p>而生成这两个模版文件的源码如下:</p>

<figure class='code'><figcaption><span>lib/generators/comment/comment_generator.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rails/generators/migration&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">CommentGenerator</span> <span class="o">&lt;</span> <span class="ss">Rails</span><span class="p">:</span><span class="ss">:Generators</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">Rails</span><span class="p">:</span><span class="ss">:Generators</span><span class="o">::</span><span class="no">Migration</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">source_root</span>
</span><span class='line'>    <span class="vi">@_acts_as_commentable_source_root</span> <span class="o">||=</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s2">&quot;../templates&quot;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">next_migration_number</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'>    <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">utc</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s2">&quot;%Y%m%d%H%M%S&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create_model_file</span>
</span><span class='line'>    <span class="n">template</span> <span class="s2">&quot;comment.rb&quot;</span><span class="p">,</span> <span class="s2">&quot;app/models/comment.rb&quot;</span>
</span><span class='line'>    <span class="n">migration_template</span> <span class="s2">&quot;create_comments.rb&quot;</span><span class="p">,</span> <span class="s2">&quot;db/migrate/create_comments.rb&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是使用rails generation功能实现的</p>

<!-- more -->


<p>还可以查看其他gem的实现方式</p>

<p><a href="https://github.com/LTe/acts-as-messageable/blob/master/lib/generators/acts-as-messageable/migration/migration_generator.rb">acts_as_messageable</a></p>

<p>更详细的可参考<a href="http://guides.rubyonrails.org/generators.html">rails generation</a></p>

<h3>如何使用</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">acts_as_commentable</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">commentable</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">create</span>
</span><span class='line'><span class="n">commentable</span><span class="o">.</span><span class="n">comments</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:title</span> <span class="o">=&gt;</span> <span class="s2">&quot;First comment.&quot;</span><span class="p">,</span> <span class="ss">:comment</span> <span class="o">=&gt;</span> <span class="s2">&quot;This is the first comment.&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>分析</h4>

<p>如果不使用gem来写评论，一般我们会在model上写has_many comments这样的东西，而acts_as_commentable这个gem它也是要实现这个的，只是它进行包装</p>

<p>关键在<code>acts_as_commentable</code>这一行</p>

<figure class='code'><figcaption><span>lib/commentable_method.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;active_record&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># ActsAsCommentable</span>
</span><span class='line'><span class="k">module</span> <span class="nn">Juixe</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Acts</span> <span class="c1">#:nodoc:</span>
</span><span class='line'>    <span class="k">module</span> <span class="nn">Commentable</span> <span class="c1">#:nodoc:</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">included</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>
</span><span class='line'>        <span class="c1"># active_record类会extend ClassMethods模块</span>
</span><span class='line'>        <span class="n">base</span><span class="o">.</span><span class="n">extend</span> <span class="no">ClassMethods</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">module</span> <span class="nn">ClassMethods</span>
</span><span class='line'>        <span class="c1"># 由active_record继承的model都有acts_as_commentable这个方法</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">acts_as_commentable</span><span class="p">(</span><span class="n">options</span><span class="o">=</span><span class="p">{})</span>
</span><span class='line'>          <span class="c1"># 多态</span>
</span><span class='line'>          <span class="n">has_many</span> <span class="ss">:comments</span><span class="p">,</span> <span class="p">{</span><span class="ss">:as</span> <span class="o">=&gt;</span> <span class="ss">:commentable</span><span class="p">,</span> <span class="ss">:dependent</span> <span class="o">=&gt;</span> <span class="ss">:destroy</span><span class="p">}</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
</span><span class='line'>          <span class="c1"># 具体model实例方法</span>
</span><span class='line'>          <span class="kp">include</span> <span class="ss">Juixe</span><span class="p">:</span><span class="ss">:Acts</span><span class="o">::</span><span class="ss">Commentable</span><span class="p">:</span><span class="ss">:InstanceMethods</span>
</span><span class='line'>          <span class="c1"># 具体model类的单例方法</span>
</span><span class='line'>          <span class="kp">extend</span> <span class="ss">Juixe</span><span class="p">:</span><span class="ss">:Acts</span><span class="o">::</span><span class="ss">Commentable</span><span class="p">:</span><span class="ss">:SingletonMethods</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:include</span><span class="p">,</span> <span class="ss">Juixe</span><span class="p">:</span><span class="ss">:Acts</span><span class="o">::</span><span class="no">Commentable</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>有这一句<code>ActiveRecord::Base.send(:include, Juixe::Acts::Commentable)</code>只要任何继承ActiveRecord::Base的model都可以使用<code>acts_as_commentable</code> 它是一个classMethods</p>

<p>现在我们来分析源码commentable_methods.rb</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">has_many</span> <span class="ss">:comments</span><span class="p">,</span> <span class="p">{</span><span class="ss">:as</span> <span class="o">=&gt;</span> <span class="ss">:commentable</span><span class="p">,</span> <span class="ss">:dependent</span> <span class="o">=&gt;</span> <span class="ss">:destroy</span><span class="p">}</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
</span><span class='line'><span class="kp">include</span> <span class="ss">Juixe</span><span class="p">:</span><span class="ss">:Acts</span><span class="o">::</span><span class="ss">Commentable</span><span class="p">:</span><span class="ss">:InstanceMethods</span>
</span><span class='line'><span class="kp">extend</span> <span class="ss">Juixe</span><span class="p">:</span><span class="ss">:Acts</span><span class="o">::</span><span class="ss">Commentable</span><span class="p">:</span><span class="ss">:SingletonMethods</span>
</span></code></pre></td></tr></table></div></figure>


<p>第一行是一个activemodel relationship表示model使用多态的comment
<code>Juixe::Acts::Commentable::SingletonMethods</code>是类的单例方法,下面的方法可以用Post.find_comments_by_user来调用,例如
Book.find_comments_for(Book.last)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># This module contains class methods</span>
</span><span class='line'><span class="k">module</span> <span class="nn">SingletonMethods</span>
</span><span class='line'>  <span class="c1"># Helper method to lookup for comments for a given object.</span>
</span><span class='line'>  <span class="c1"># This method is equivalent to obj.comments.</span>
</span><span class='line'>  <span class="c1"># 找一个对象的所有comments</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">find_comments_for</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># 返回类似Topic, Article这样的字符串</span>
</span><span class='line'>    <span class="n">commentable</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">base_class</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'>    <span class="c1"># find_comments_for_commentable是Comment.rb通过include ActsAsCommentable::Comment引入进来的,它是一个类方法</span>
</span><span class='line'>    <span class="no">Comment</span><span class="o">.</span><span class="n">find_comments_for_commentable</span><span class="p">(</span><span class="n">commentable</span><span class="p">,</span> <span class="n">obj</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Helper class method to lookup comments for</span>
</span><span class='line'>  <span class="c1"># the mixin commentable type written by a given user.  </span>
</span><span class='line'>  <span class="c1"># This method is NOT equivalent to Comment.find_comments_for_user</span>
</span><span class='line'>  <span class="c1"># 通过创建者来找comments</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">find_comments_by_user</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'>    <span class="n">commentable</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">base_class</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'>    <span class="no">Comment</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="o">[</span><span class="s2">&quot;user_id = ? and commentable_type = ?&quot;</span><span class="p">,</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="n">commentable</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">order</span><span class="p">(</span><span class="s2">&quot;created_at DESC&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Juixe::Acts::Commentable::InstanceMethods是实例方法
可以通过类似这样的方式来调用实例方法
<code>Book.last.add_comment Comment.create(comment: "second comment")</code></p>

<p>接下来我们来看看comment.rb这边</p>

<p>它总要来个belongs_to吧</p>

<figure class='code'><figcaption><span>comment.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Comment</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># 引入一些Comment可以使用的方法</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">ActsAsCommentable</span><span class="p">:</span><span class="ss">:Comment</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:commentable</span><span class="p">,</span> <span class="ss">:polymorphic</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">default_scope</span> <span class="ss">:order</span> <span class="o">=&gt;</span> <span class="s1">&#39;created_at ASC&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># NOTE: install the acts_as_votable plugin if you</span>
</span><span class='line'>  <span class="c1"># want user to vote on the quality of comments.</span>
</span><span class='line'>  <span class="c1">#acts_as_voteable</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># NOTE: Comments belong to a user</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:user</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>belongs_to :commentable, :polymorphic =&gt; true</code>这就是原理
然而<code>include ActsAsCommentable::Comment</code>这个会做什么呢</p>

<p>接上来往下看</p>

<figure class='code'><figcaption><span>lib/comment_method.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">ActsAsCommentable</span>
</span><span class='line'>  <span class="c1"># including this module into your Comment model will give you finders and named scopes</span>
</span><span class='line'>  <span class="c1"># useful for working with Comments.</span>
</span><span class='line'>  <span class="c1"># The named scopes are:</span>
</span><span class='line'>  <span class="c1">#   in_order: Returns comments in the order they were created (created_at ASC).</span>
</span><span class='line'>  <span class="c1">#   recent: Returns comments by how recently they were created (created_at DESC).</span>
</span><span class='line'>  <span class="c1">#   limit(N): Return no more than N comments.</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Comment</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">included</span><span class="p">(</span><span class="n">comment_model</span><span class="p">)</span>
</span><span class='line'>      <span class="c1"># 引入的是类方法</span>
</span><span class='line'>      <span class="n">comment_model</span><span class="o">.</span><span class="n">extend</span> <span class="no">Finders</span>
</span><span class='line'>      <span class="c1"># 引入一些scope</span>
</span><span class='line'>      <span class="n">comment_model</span><span class="o">.</span><span class="n">scope</span> <span class="ss">:in_order</span><span class="p">,</span> <span class="n">comment_model</span><span class="o">.</span><span class="n">order</span><span class="p">(</span><span class="s1">&#39;created_at ASC&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">comment_model</span><span class="o">.</span><span class="n">scope</span> <span class="ss">:recent</span><span class="p">,</span>   <span class="n">comment_model</span><span class="o">.</span><span class="n">order</span><span class="p">(</span><span class="s1">&#39;created_at DESC&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># 下面都是Comment model能使用的类方法</span>
</span><span class='line'>    <span class="k">module</span> <span class="nn">Finders</span>
</span><span class='line'>      <span class="c1"># Helper class method to lookup all comments assigned</span>
</span><span class='line'>      <span class="c1"># to all commentable types for a given user.</span>
</span><span class='line'>      <span class="c1"># 通过user来找所有comments</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">find_comments_by_user</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'>        <span class="n">where</span><span class="p">(</span><span class="o">[</span><span class="s2">&quot;user_id = ?&quot;</span><span class="p">,</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">order</span><span class="p">(</span><span class="s2">&quot;created_at DESC&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># Helper class method to look up all comments for </span>
</span><span class='line'>      <span class="c1"># commentable class name and commentable id.</span>
</span><span class='line'>      <span class="c1"># 一个简单的where语句</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">find_comments_for_commentable</span><span class="p">(</span><span class="n">commentable_str</span><span class="p">,</span> <span class="n">commentable_id</span><span class="p">)</span>
</span><span class='line'>        <span class="n">where</span><span class="p">(</span><span class="o">[</span><span class="s2">&quot;commentable_type = ? and commentable_id = ?&quot;</span><span class="p">,</span> <span class="n">commentable_str</span><span class="p">,</span> <span class="n">commentable_id</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">order</span><span class="p">(</span><span class="s2">&quot;created_at DESC&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># Helper class method to look up a commentable object</span>
</span><span class='line'>      <span class="c1"># given the commentable class name and id </span>
</span><span class='line'>      <span class="c1"># 找到使用评论的对象</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">find_commentable</span><span class="p">(</span><span class="n">commentable_str</span><span class="p">,</span> <span class="n">commentable_id</span><span class="p">)</span>
</span><span class='line'>        <span class="c1"># 返回类自身</span>
</span><span class='line'>        <span class="n">model</span> <span class="o">=</span> <span class="n">commentable_str</span><span class="o">.</span><span class="n">constantize</span>
</span><span class='line'>        <span class="n">model</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="ss">:find_comments_for</span><span class="p">)</span> <span class="p">?</span> <span class="n">model</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">commentable_id</span><span class="p">)</span> <span class="p">:</span> <span class="kp">nil</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以用Comment.find_comments_by_user的方式来调用</p>

<h3>总结</h3>

<p>它的源码并不复杂，我们通过它并不是要写出跟它一样或类似的gem来，只是可以让我们明白一个道理,代码的重用与组织, 就像在Post.rb里写上acts_as_commentable就可以创建评论了,很方便,还有,通过学习这个gem我们可以学习它是如何设计数据库的</p>

<p>类似的gem还有</p>

<ul>
<li><a href="https://github.com/tcocca/acts_as_follower">acts_as_follower</a></li>
<li><a href="https://github.com/LTe/acts-as-messageable">acts-as-messageable</a></li>
<li><a href="https://github.com/mbleigh/acts-as-taggable-on">acts-as-taggable-on</a></li>
<li><a href="https://github.com/goncalossilva/acts_as_paranoid">acts_as_paranoid</a></li>
<li><a href="https://github.com/stefankroes/ancestry">ancestry</a></li>
<li><a href="https://github.com/collectiveidea/awesome_nested_set">awesome_nested_set</a></li>
</ul>


<p>关于acts_as_commentable更详细的用法可查看
<a href="http://juixe.com/techknow/index.php/2006/06/18/acts-as-commentable-plugin/">acts-as-commentable-plugin</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的学习网站收集]]></title>
    <link href="http://yinsigan.github.io/blog/2013/07/10/wo-de-xue-xi-wang-zhan-shou-ji/"/>
    <updated>2013-07-10T17:41:00+08:00</updated>
    <id>http://yinsigan.github.io/blog/2013/07/10/wo-de-xue-xi-wang-zhan-shou-ji</id>
    <content type="html"><![CDATA[<h2>教程</h2>

<ul>
<li><a href="http://www.tutorialspoint.com/">tutorialspoint</a></li>
<li><a href="http://ihower.tw/rails3/">rails实战圣经</a></li>
<li><a href="http://guides.rubyonrails.org/">rails guides</a></li>
<li><a href="https://github.com/saberma/ruby-dev-bookmarks">ruby-dev-bookmarks</a></li>
<li><a href="http://ruby-china.org/topics/5205">gem列表</a></li>
<li><a href="http://railstutorial-china.org/">rails tutorial china</a></li>
<li><a href="http://www.w3schools.com/jquery/default.asp">w3c jquery</a></li>
<li><a href="http://www.simonecarletti.com/blog/2009/09/inside-ruby-on-rails-reading-source-code/">关于rails源码</a></li>
<li><a href="http://lrthw.github.io/">笨方法学ruby</a></li>
<li><a href="http://www.kuqin.com/rubycndocument/man/index.html">ruby参考手册</a></li>
<li><a href="http://www.chengpeng.me/">吕成鹏的ruby笔记</a></li>
<li><a href="http://guides.ruby-china.org/">rails guides 中文版</a></li>
</ul>


<h2>视频</h2>

<ul>
<li><a href="http://railscasts.com/">railscasts</a></li>
<li><a href="http://railscasts-china.com/">railscasts-china</a></li>
<li><a href="http://happycasts.net/">happycasts</a></li>
<li><a href="http://study.163.com/cloud/myCloudClass.htm#/cloudClass/index">网易云</a></li>
<li><a href="http://edu.51cto.com/lecturer/user_id-140924.html">诱人的ruby</a></li>
<li><a href="http://itercast.com/">linuxcasts</a></li>
</ul>


<!-- more -->


<h2>书</h2>

<ul>
<li><a href="http://shichuan.github.io/javascript-patterns/">javascript-patterns</a></li>
<li><a href="https://github.com/zhengjia/sinatra-explained">sinatra-explained</a></li>
<li><a href="http://thekaiway.com/inspect-rails/">inspect-rails</a></li>
<li><a href="https://github.com/ruanyf/jstutorial">jstutorial</a></li>
<li><a href="https://leanpub.com/everydayrailsrspec-cn">everydayrailsrspec</a></li>
<li><a href="https://github.com/IconoclastLabs/rubymotion_cookbook">rubymotion_cookbook</a></li>
<li><a href="http://rubymotion-tutorial.com/">rubymotion-tutorial</a></li>
<li><a href="https://github.com/airbnb/javascript">javascript</a></li>
<li><a href="https://github.com/JuanitoFatas/Guides/blob/master/guides/edge-translation/rails-on-rack-zh_CN.md">rails-on-rack-zh_CN</a></li>
<li><a href="https://github.com/JuanitoFatas/Guides/blob/master/guides/edge-translation/migrations-zh_CN.md">rails-migration</a></li>
<li><a href="https://github.com/pluralsight/git-internals-pdf/releases">git-internals</a></li>
<li><a href="http://www-cs-students.stanford.edu/~blynn/gitmagic/index.html">gitmagic</a></li>
<li><a href="http://about.ac/remote/">remote</a></li>
<li><a href="http://www.coderholic.com/25-free-computer-science-books/">25-free-computer-science-books</a></li>
<li><a href="http://edwinmeyer.com/Integrated_RHG.html">ruby源码分析</a></li>
<li><a href="http://cstheory.stackexchange.com/questions/19759/core-algorithms-deployed/19773#19773">各种算法</a></li>
<li><a href="http://island205.github.io/tlboc/">coffeescript中文手册</a></li>
</ul>


<h2>工具</h2>

<ul>
<li><a href="https://pomotodo.com/">番茄土豆</a></li>
<li><a href="http://www.timer-tab.com/">timer-tab</a></li>
<li><a href="http://ruby-doc.org/core-1.9.3/">ruby-doc</a></li>
<li><a href="http://api.rubyonrails.org/">rails-api</a></li>
<li><a href="https://www.ruby-toolbox.com/">gem-categories</a></li>
<li><a href="https://pragmatic.ly">项目管理</a></li>
<li><a href="http://apidock.com/">rails_api_dock</a></li>
<li><a href="http://easydo.me/">麦库备忘</a></li>
<li><a href="https://goalstacker.com/dashboard">goalstacker</a></li>
<li><a href="http://www.dbninja.com/">mysql管理工具</a></li>
<li><a href="http://robomongo.org/">robomongo</a></li>
<li><a href="https://github.com/bobthecow/genghis#readme">genghis</a></li>
<li><a href="https://github.com/joeferner/redis-commander">redis-commander</a></li>
<li><a href="http://note.sdo.com/">麦库记事</a></li>
<li><a href="http://alibench.com/">阿里测</a></li>
<li><a href="http://newrelic.com/">newrelic</a></li>
<li><a href="http://overapi.com/">所有编程语言的api与文档</a></li>
<li><a href="http://www.css88.com/jqapi-1.9/">jquery api</a></li>
<li><a href="http://www.commandlinefu.com/commands/browse">commandlinefu</a></li>
<li><a href="http://commandlinefu.cn/">中文版commandlinefu</a></li>
<li><a href="http://explainshell.com/">explainshell</a></li>
<li><a href="http://jsbeautifier.org/">jsbeautifier</a></li>
</ul>


<h2>好的源码</h2>

<ul>
<li><a href="https://github.com/railstutorial/sample_app_2nd_ed">railstutorial</a></li>
<li><a href="https://github.com/paulfioravanti/sample_app">sample_app</a></li>
<li><a href="https://github.com/robbin/robbin_site">robbin_site</a></li>
<li><a href="https://github.com/pragmaticly/teahour.fm">teahour</a></li>
<li><a href="https://github.com/railsgirls-china/railsgirls">railsgirls</a></li>
<li><a href="https://github.com/ruby-china/ruby-china">ruby-china</a></li>
<li><a href="https://github.com/pragmaticly/railscasts-china">railscasts-china</a></li>
<li><a href="https://github.com/jimhj/wakmj.com">wakmj</a></li>
<li><a href="https://github.com/saberma/shopqi">shopqi</a></li>
<li><a href="https://github.com/happypeter/happycasts">happycasts</a></li>
<li><a href="https://github.com/chloerei/code_campo">code_campo</a></li>
<li><a href="https://github.com/daqing/rabel">rabel</a></li>
<li><a href="https://github.com/discourse/discourse">discourse</a></li>
<li><a href="https://github.com/twers/re-education">re-education</a></li>
<li><a href="https://github.com/jimhj/jimmy_me_ar">jimmy_me_ar</a></li>
<li><a href="https://github.com/fredwu/angel_nest">angel_nest</a></li>
<li><a href="https://github.com/vecio/vec.io">vec</a></li>
<li><a href="https://github.com/jasl/a_rails_start_up_omakase">a_rails_start_up_omakase</a></li>
<li><a href="https://github.com/twers/re-education">re-education</a></li>
<li><a href="https://github.com/bay6/union">union</a></li>
<li><a href="https://github.com/chloerei/writings">writings</a></li>
<li><a href="https://github.com/dianrui/vmeal">vmeal</a>一个在线订餐平台</li>
<li><a href="http://www.locomotivecms.com/tour">tour</a>一个cms</li>
<li><a href="https://github.com/nerdyworm/flowfeeds">flowfeeds</a>source code for flowfeeds.com</li>
<li><a href="https://github.com/tomgrim1/ribbit">ribbit</a>一个简单的twitter clone app</li>
<li><a href="https://github.com/diaspora/diaspora">diaspora</a>一个社区网络</li>
<li><a href="http://www.opensourcerails.com/">开源的cms</a></li>
<li><a href="https://github.com/huacnlee/imax.im">imax.im</a></li>
</ul>


<h2>css框架</h2>

<ul>
<li><a href="http://usablica.github.io/front-end-frameworks/compare.html">前端框架集合</a></li>
<li><a href="http://bourbon.io/">bourbon</a></li>
<li><a href="http://lessframework.com/">lessframework</a></li>
<li><a href="http://www.getskeleton.com/">getskeleton</a></li>
<li><a href="http://www.colorzilla.com/gradient-editor/">gradient-editor</a></li>
<li><a href="http://odyniec.net/projects/imgareaselect/">imgareaselect</a></li>
<li><a href="http://semantic-ui.com/">semantic-ui</a></li>
<li><a href="http://getuikit.com/">uikit</a></li>
<li><a href="http://foundation.zurb.com/">foundation</a></li>
<li><a href="http://designmodo.github.io/Flat-UI/">Flat-UI</a></li>
<li><p><a href="http://purecss.io/">purecss</a></p>

<h3>bootstrap</h3>

<ul>
<li><a href="http://getbootstrap.com/2.3.2/">bootstrap 2</a></li>
<li><a href="http://getbootstrap.com/">bootstrap 3</a></li>
<li><a href="http://www.bootcss.com/">bootstrap 中文版</a></li>
<li><a href="http://bootsnipp.com/resources">bootstrap 资源大集合</a></li>
<li><a href="http://bootsnipp.com/">bootstrap 代码片断</a></li>
<li><a href="http://bootswatch.com/">bootstrap 免费模版</a></li>
<li><a href="http://pikock.github.io/bootstrap-magic/">bootstrap 定制化magic</a></li>
<li><a href="http://stylebootstrap.info/">bootstrap 定制化style</a></li>
<li><a href="http://deltaepsilon.github.io/bootstrap-square-ui/">bootstrap square-ui</a></li>
<li><a href="http://msurguy.github.io/ladda-bootstrap/">Ladda UI for Bootstrap 3</a></li>
<li><a href="http://www.bootstrap-switch.org/">bootstrap-switch</a></li>
<li><a href="http://silviomoreto.github.io/bootstrap-select/">bootstrap-select</a></li>
<li><a href="http://www.lavishbootstrap.com/">lavishbootstrap</a></li>
<li><a href="http://metroui.org.ua/">Metro UI CSS 2.0</a></li>
</ul>
</li>
</ul>


<h2>javascript框架</h2>

<ul>
<li><a href="http://sugarjs.com/features">sugarjs</a></li>
<li><a href="http://eloquentjavascript.net/contents.html">javascript书</a></li>
<li><a href="https://github.com/needim/noty">A jQuery Notification Plugin</a></li>
<li><a href="http://fgnass.github.io/spin.js/">ajax loading</a></li>
<li><a href="http://ajaxload.info/">ajax picture generate</a></li>
<li><a href="http://fancybox.net/">图片</a></li>
<li><a href="http://malsup.github.io/">jquery库</a></li>
<li><a href="http://todomvc.com/">javascript-mvc</a></li>
<li><a href="http://momentjs.com/">datetime </a></li>
<li><a href="http://jsforcats.com/">javascript cats book</a></li>
<li><a href="https://github.com/marcosesperon/Messi">A simple message plugin </a></li>
<li><a href="https://github.com/soulwire/Makisu">An experimental CSS 3D dropdown</a></li>
</ul>


<h2>gems</h2>

<ul>
<li><a href="https://github.com/stars">starts</a></li>
<li><a href="http://www.awesomecommandlineapps.com/gems.html">awesomecommandlineapps</a></li>
</ul>


<h2>编程学习</h2>

<ul>
<li><a href="http://www.codecademy.com/">codecademy</a></li>
</ul>


<h2>靠谱的服务</h2>

<ul>
<li><a href="http://luosimao.com/">luosimao企业邮件营销系统</a></li>
<li><a href="http://www.getvines.com/">getskeleton实时消息</a></li>
<li><a href="https://www.digitalocean.com">digitalocean云主机</a></li>
<li><a href="https://postmarkapp.com/">postmarkapp邮件</a></li>
</ul>


<h2>色彩与css在线工具</h2>

<ul>
<li><a href="http://colorschemedesigner.com/">colorschemedesigner</a></li>
<li><a href="http://css3generator.com/">css3generator</a></li>
<li><a href="http://www.css3maker.com/index.html">css3maker</a></li>
<li><a href="http://www.bootcss.com/p/websafecolors/">web安全色</a></li>
<li><a href="http://hslpicker.com/#ff7b00">hslpicker</a></li>
<li><a href="http://colrd.com/palette/">colrd</a></li>
<li><a href="https://kuler.adobe.com/create/color-wheel/">adobe kuler</a></li>
<li><a href="http://weloveiconfonts.com/">weloveiconfonts</a></li>
</ul>


<h2>web素材</h2>

<ul>
<li><a href="http://ikeepu.com/">爱库</a></li>
<li><a href="http://www.lanrentuku.com/">懒人图库</a></li>
<li><a href="http://dribbble.com/">dribbble</a></li>
<li><a href="http://365psd.com/">365psd</a></li>
<li><a href="http://subtlepatterns.com/">背景</a></li>
<li><a href="https://www.iconfinder.com/">图标</a></li>
<li><a href="http://www.iconfont.cn/">阿里巴巴图标库</a></li>
<li><a href="http://cssfontstack.com/">字体</a></li>
<li><a href="http://spritepad.wearekiss.com/">生成sprite</a></li>
</ul>


<h2>博客</h2>

<ul>
<li><a href="https://pragmatic.ly">xdite</a></li>
<li><a href="http://blog.chloerei.com/">rei</a></li>
<li><a href="http://www.ruanyifeng.com/blog/">阮一峰</a></li>
<li><a href="http://ihower.tw/blog/posts">ihower</a></li>
<li><a href="http://robbinfan.com/">robbin</a></li>
<li><a href="http://lixiaolai.com/">李笑来</a></li>
<li><a href="http://terrytai.com/">terry</a></li>
<li><a href="http://www.zhangxinxu.com/wordpress/">张鑫旭</a></li>
</ul>


<h2>版本控制</h2>

<ul>
<li><a href="http://www.worldhello.net/gotgithub/index.html">gotgithub</a></li>
<li><a href="http://ihower.tw/git/">ihower git</a></li>
<li><a href="http://rogerdudler.github.io/git-guide/index.zh.html">git 简易指南</a></li>
</ul>


<h2>编辑工具</h2>

<ul>
<li><a href="http://docs.sublimetext.tw">sublimetext tw</a></li>
<li><a href="https://sublime.wbond.net/browse/popular">sublimetext 插件</a></li>
<li><a href="http://www.vimpusher.com/plugins">vim插件</a></li>
</ul>


<h2>翻墙必备</h2>

<ul>
<li><a href="https://www.vpncloud.biz/">云梯</a></li>
</ul>


<h2>生活与爱好</h2>

<ul>
<li><a href="http://www.duokan.com/">多看</a></li>
<li><a href="http://www.beitaichufang.com/">贝太厨房</a></li>
<li><a href="http://www.cntv.cn/lm/baijiajiangtan/">百家讲坛</a></li>
<li><a href="http://www.btc123.com/">比特币</a></li>
<li><a href="http://www.guoxue.com/shibu/zztj/zztjml.htm">资质通鉴</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[人生就是初见]]></title>
    <link href="http://yinsigan.github.io/blog/2013/07/05/ren-sheng-jiu-shi-chu-jian/"/>
    <updated>2013-07-05T12:52:00+08:00</updated>
    <id>http://yinsigan.github.io/blog/2013/07/05/ren-sheng-jiu-shi-chu-jian</id>
    <content type="html"><![CDATA[<p>梳妆打扮净容颜，勿勿忙忙把班上。</p>

<p>悄然一见是佳女，玲珑剔透傲身姿。</p>

<p>肌肤赛雪小蛮腰，亭亭玉立勾神心。</p>

<p>偷眼正看似西施，千言万语难起齿。</p>

<p>但愿时间永停住，佳女相伴过一生。</p>

<p>只恨佳女瞬离去，相思相望身影现。</p>

<p>永记娇颜在心中，下次相见续前缘。</p>
]]></content>
  </entry>
  
</feed>
