<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: metaprogramming | 小子的博客]]></title>
  <link href="http://yinsigan.github.io/blog/categories/metaprogramming/atom.xml" rel="self"/>
  <link href="http://yinsigan.github.io/"/>
  <updated>2013-12-27T15:30:23+08:00</updated>
  <id>http://yinsigan.github.io/</id>
  <author>
    <name><![CDATA[小子]]></name>
    <email><![CDATA[ganweiliang886@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ruby元编程之block]]></title>
    <link href="http://yinsigan.github.io/blog/2013/12/26/rubyyuan-bian-cheng-zhi-block/"/>
    <updated>2013-12-26T17:36:00+08:00</updated>
    <id>http://yinsigan.github.io/blog/2013/12/26/rubyyuan-bian-cheng-zhi-block</id>
    <content type="html"><![CDATA[<blockquote><blockquote><p>以最简单的方式来理解block</p></blockquote></blockquote>

<h2>block</h2>

<p>我们先看最简单的例子</p>

<p>``` ruby
def awesome_print
  yield
end
awesome_print { puts &ldquo;I&rsquo;m xiaozi&rdquo; }</p>

<h1>=></h1>

<p>I&rsquo;m xiaozi
```</p>

<p>也就是说任何方法你都可以给它传一个block,而且必须是最后一个参数,但是要使用yield去执行这个block</p>

<p>另外,<code>awesome_print { puts 'I'm xiaozi }</code>太难看了,那就</p>

<p><code>ruby
awesome_print do
  puts "I'm xiaozi"
end
</code></p>

<p>漂亮了吧</p>

<p>太简单可不行,总得传参数</p>

<p>``` ruby
def awesome_print name
  yield name
end
awesome_print(&lsquo;xiaozi&rsquo;) do |name|
  puts &ldquo;I&rsquo;m #{name}&rdquo;
end</p>

<h1>=></h1>

<p>I&rsquo;m xiaozi
```</p>

<p>总结一下yield,它就是块的占位符,awesome_print把参数值'xiaozi'传给<code>do ... end</code>块中的name参数,yield占的坑让给了<code>do ... end</code>块,并执行,name参数的值'xiaozi'传给<code>yield name</code>中的name参数</p>

<p>这样也行</p>

<p>``` ruby
def awesome_print
  yield &ldquo;xiaozi&rdquo;
end
awesome_print { |name| puts &ldquo;I&rsquo;m #{name}&rdquo; }</p>

<h1>=></h1>

<p>I&rsquo;m xiaozi
```</p>

<p>很简单吧!</p>

<p>如何判断一个方法传过来block了?</p>

<p><code>ruby
def awesome_print
  yield if block_given?
  'no block'
end
</code></p>

<p>明白了吗,就是用block_given?</p>

<p>在这里,<code>{ ... }</code>或<code>do ... end</code>跟yield就是成对存在的,传了block,执行时就要用yield</p>

<h2>Proc</h2>

<p>它和block有什么不同呢</p>

<p>``` ruby
say_hello = Proc.new { |name| &ldquo;I&rsquo;m #{name}&rdquo; }
say_hello.call(&lsquo;xiaozi&rsquo;)</p>

<h1>=></h1>

<p>I&rsquo;m xiaozi
```</p>

<p>用了关键字Proc.new来创建一个block对象,然后赋给一个变量,最后用call来调用的</p>

<p>原来Proc.new创建的block对象还可以赋给一个变量</p>

<p>在这里,用Proc.new创建的block对象,要由call来执行和调用</p>

<h2>lambda</h2>

<p>``` ruby
say_hello = lambda { |name| &ldquo;I&rsquo;m #{name}&rdquo; }
say_hello.class # => Proc
say_hello.call(&lsquo;xiaozi&rsquo;)</p>

<h1>=></h1>

<p>I&rsquo;m xiaozi
```</p>

<p>跟Proc差不多,lambda也创建一个block对象,而且它的类还是Proc</p>

<p>在这里,用lambda创建的block对象,要由call来执行和调用</p>

<h2>&ndash;></h2>

<p>ruby 1.9之后用这个来代替lambda</p>

<p>于是<code>say_hello = lambda { |name| "I'm #{name}" }</code>变成了<code>say_hello = -&gt; { |name| "I'm #{name}" }</code></p>

<p>``` ruby
say_hello = &ndash;> { |name| &ldquo;I&rsquo;m #{name}&rdquo; }
say_hello.class # => Proc
say_hello.call(&lsquo;xiaozi&rsquo;)</p>

<h1>=></h1>

<p>I&rsquo;m xiaozi
```</p>

<p>推荐用这种方法</p>

<h3>return yield</h3>

<p>yield能作为返回值出现</p>

<p>``` ruby
def awesome_print
  puts yield
end
awesome_print { &ldquo;I&rsquo;m xiaozi&rdquo; }</p>

<h1>=></h1>

<p>I&rsquo;m xiaozi
```</p>

<h3>传多个block对象</h3>

<p>一个block对象作为参数不够,怎么办</p>

<p>``` ruby
def awesome_print(who, where)
  &ldquo;#{who.call} live in #{where.call}&rdquo;
end
who = &ndash;> { &ldquo;xiaozi&rdquo; }
where = &ndash;> {&lsquo;shenzhen&rsquo;}
awesome_print(who, where)</p>

<h1>=></h1>

<p>&ldquo;xiaozi live in shenzhen&rdquo;
```</p>

<p>列好队,用block对象传过去就行了</p>

<h2>block vs lambda vs Proc</h2>

<p>lambda跟Proc在形式上还比较相似,但它们跟<code>do ... end</code>或<code>{ ... }</code>这种形式相差好多</p>

<p>不信?来看下</p>

<h3>&amp; 区别块和块对象</h3>

<p>``` ruby
def awesome_print(&amp;the_proc)
  the_proc
end
my_proc = awesome_print { &ldquo;I&rsquo;m xiaozi&rdquo; }
my_proc.class # => Proc
my_proc.call</p>

<h1>=></h1>

<p>I&rsquo;m xiaozi
```</p>

<p>&amp;这个符号会不会很熟悉呢,对,C语言就有,意思是取地址</p>

<p>难道这里的block跟地址有关系?</p>

<p>在这里&amp;the_proc表示接收的参数的值要是一个<code>do ... end</code>或<code>{ ... }</code>这样的块,而不是由Proc.new或lambda创建的块对象</p>

<p>注意区分<strong>块</strong>和<strong>块对象</strong></p>

<p>很明显<code>do ... end</code>或<code>{ ... }</code>这样的块跟&amp;是一对的</p>

<p>假如把<code>{ .. }</code>换成lambda</p>

<p>``` ruby
def awesome_print(&amp;the_proc)
  the_proc
end
my_proc = lambda { &ldquo;I&rsquo;m xiaozi&rdquo; }
awesome_print(my_proc)</p>

<h1>=></h1>

<p>ArgumentError: wrong number of arguments (1 for 0)
```</p>

<p>出错了吧,看来lambda这样的块对象和&amp;不是一对的</p>

<p>那给lambda前面加个&amp;(类似于C语言的取地址)</p>

<p>``` ruby
def awesome_print(&amp;the_proc)
  the_proc
end
awesome_print(&amp;lambda { puts &ldquo;I&rsquo;m xiaozi&rdquo; }).call</p>

<h1>or</h1>

<p>my_proc = lambda {  &ldquo;I&rsquo;m xiaozi&rdquo; }
awesome_print(&amp;my_proc).call</p>

<h1>=></h1>

<p>I&rsquo;m xiaozi
```</p>

<p>果然把lambda前加个&amp;就行</p>

<p>或者这样也行</p>

<p>``` ruby</p>

<h1>注意这行&amp;the_proc 变成了 the_proc</h1>

<p>def awesome_print(the_proc)
  the_proc
end
my_proc = lambda {  &ldquo;I&rsquo;m xiaozi&rdquo; }
awesome_print(my_proc).call</p>

<h1>=></h1>

<p>I&rsquo;m xiaozi
```</p>

<p>Proc也是跟lambda一样的,不信?你去试试</p>

<p>总结一下,block跟&amp;是一对的,block对象(lambda或Proc)取&amp;才跟&amp;是一对的,block和block对象的区别在于&amp;,block对象取&amp;之后才在形式上跟block一样</p>

<h3>&amp; yield call相互转化</h3>

<p>上面说过块block给方法后用yield来执行和调用,但是如果block传给&amp;的参数变量,又可以用call来执行,到底怎么回事</p>

<p>``` ruby</p>

<h1>yield &amp; block</h1>

<p>def awesome_print
  yield
end
awesome_print { &ldquo;I&rsquo;m xiaozi&rdquo; }</p>

<p>def awesome_print(code)
  code.call
end
awesome_print lambda { &ldquo;I&rsquo;m xiaozi&rdquo; }
```</p>

<p>这两种方法上面都说过了,但是<code>lambda { "I'm xiaozi" }</code>不给call执行,要给yield执行,可以吗</p>

<p>``` ruby
def awesome_print
  yield
end</p>

<p>awesome_print(&amp;lambda { &ldquo;I&rsquo;m xiaozi&rdquo;} )
```</p>

<p>这样都行!它们有一个相同的联系点?</p>

<h3>Symbol’s To Proc</h3>

<p>你肯定用过类似这样的方法吧<code>(1..10).inject(&amp;:+)</code>或者<code>[:a, :b, :c].map(&amp;:to_s)</code>等</p>

<p>``` ruby
[:a, :b, :c].map(&amp;:to_s)</p>

<h1>=></h1>

<p>[&ldquo;a&rdquo;, &ldquo;b&rdquo;, &ldquo;c&rdquo;]
```</p>

<p>好神奇,怎么做到的?</p>

<p>&amp;:to_s能够作为参数值传递,其中:to_s是一个symbol,&amp;:to_s会将to_s转成一个proc对象,结果相当于:to_s.to_proc</p>

<p>任何symbol都有to_proc方法</p>

<p>``` ruby
class Symbol
  def to_proc</p>

<pre><code>proc { |obj, *args| obj.send(self, *args) }
</code></pre>

<p>  end
end
```</p>

<p>self就是symbol本身,也就是方法(method)</p>

<p>第一个参数是接收symbol方法的对象
第二个参数是传递给symbol方法的参数列表</p>

<p>怎么用它呢</p>

<p>``` ruby
class Topic
  def title</p>

<pre><code>"I'm xiaozi"
</code></pre>

<p>  end</p>

<p>  def get_title</p>

<pre><code>yield self
</code></pre>

<p>  end
end
t = Topic.new
t.get_title(&amp;:title)</p>

<h1>=></h1>

<p>&ldquo;I&rsquo;m xiaozi&rdquo;
```</p>

<p>如果要使用第二个参数呢</p>

<p>``` ruby
class Topic
  def title(name)</p>

<pre><code>"I'm #{name}"
</code></pre>

<p>  end</p>

<p>  def get_title(name)</p>

<pre><code>yield self, name
</code></pre>

<p>  end
end
t = Topic.new
t.get_title(&lsquo;xiaozi&rsquo;, &amp;:title)</p>

<h1>=></h1>

<p>&ldquo;I&rsquo;m xiaozi&rdquo;
```</p>

<p>其实很简单,就是把借get_title的手去执行t的title方法</p>

<p>来验证下to_proc方法</p>

<p>``` ruby
class Topic
  def title</p>

<pre><code>"I'm xiaozi"
</code></pre>

<p>  end</p>

<p>  def get_title</p>

<pre><code>yield self
</code></pre>

<p>  end
end
t = Topic.new
t.get_title( &amp; proc{ |obj, <em>args| obj.send(:title, </em>args) } )</p>

<h1>再简单一点</h1>

<p>t.get_title( &amp; proc{ |obj| obj.send(:title) } )</p>

<h1>还可以这样,因为&amp;proc的形式跟{}是一样的</h1>

<p>t.get_title{ |obj| obj.send(:title) }</p>

<h1>干脆这样</h1>

<p>t.get_title{ |obj| obj.title }</p>

<h1>=></h1>

<p>&ldquo;I&rsquo;m xiaozi&rdquo;
```</p>

<p>现在明白了吧,其实(1..10).inject(&amp;:+)也是这个道理啦</p>

<p>``` ruby
(1..10).inject(&amp;:+)
(1..10).inject(&amp;:+.to_proc)</p>

<h1>can be expressed as</h1>

<p>(1..10).inject( &amp;proc{ |obj, <em>args| obj.send(:+, </em>args) } )</p>

<h1>which &amp; will covert into</h1>

<p>(1..10).inject( |obj, <em>args| obj.send(:+, </em>args) } )</p>

<h1>which we can convert to</h1>

<p>(1..10).inject do |obj, <em>args|
  obj.send(:+, </em>args)
end</p>

<h1>and then we can just rename our parameters to something more friendly</h1>

<p>(1..10).inject do |result, element|
  result.send(:+, element)
end</p>

<h1>=> 55</h1>

<p>```</p>

<h3>block &amp; lambda &amp; Proc的class</h3>

<p>Proc自不必说,它的class就是Proc,本来就是用Proc.new创建的嘛</p>

<p>来看下block和lambda</p>

<p>``` ruby
def awesome_print(&amp;code)
  code.class
end
awesome_print { &ldquo;I&rsquo;m xiaozi&rdquo; }</p>

<h1>=></h1>

<p>Proc</p>

<p>def awesome_print(code)
  code.class
end
awesome_print &ndash;> { &ldquo;I&rsquo;m xiaozi&rdquo; }</p>

<h1>=></h1>

<p>Proc
```</p>

<p>原来三者的class是一样的</p>

<h3>Proc vs lambda的不同之处</h3>

<h4>return语句</h4>

<p>当使用return时,Proc会中途退出,而lambda不会</p>

<p>``` ruby
def awesome_print
  my_proc = lambda { return &ldquo;I&rsquo;m xiaozi&rdquo; }
  result = my_proc.call
  return result + &lsquo; hello&rsquo;  # unreachable code!
end
awesome_print</p>

<h1>=></h1>

<p>=> &ldquo;I&rsquo;m xiaozihello&rdquo;</p>

<p>def awesome_print
  my_proc = Proc.new { return &ldquo;I&rsquo;m xiaozi&rdquo; }
  result = my_proc.call
  return result + &lsquo; hello&rsquo;  # unreachable code!
end
awesome_print</p>

<h1>=></h1>

<p>I&rsquo;m xiaozi
```</p>

<h4>参数检查</h4>

<p>lambda会检查参数列表,而Proc不会检查</p>

<p>``` ruby
def awesome_print(statu)
  who = &lsquo;xiaozi&rsquo;
  where = &lsquo;shenzhen&rsquo;
  statu.call
end</p>

<p>awesome_print(Proc.new{|who, where, other| &ldquo;#{who} live in #{where} #{other.class}&rdquo;})</p>

<h1>=></h1>

<p>&ldquo; live in  NilClass&rdquo;</p>

<p>awesome_print(lambda{|who, where, other| &ldquo;#{who} live in #{where} #{other.class}&rdquo;})</p>

<h1>=></h1>

<p>ArgumentError: wrong number of arguments (0 for 3)
```</p>

<h2>DSL</h2>
]]></content>
  </entry>
  
</feed>
